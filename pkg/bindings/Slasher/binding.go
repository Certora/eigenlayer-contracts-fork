// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Slasher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IOperatorSetManagerOperatorSet is an auto generated low-level Go binding around an user-defined struct.
type IOperatorSetManagerOperatorSet struct {
	Avs common.Address
	Id  [4]byte
}

// SlasherMetaData contains all meta data concerning the Slasher contract.
var SlasherMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_strategyManager\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"_operatorSetManager\",\"type\":\"address\",\"internalType\":\"contractIOperatorSetManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"canWithdraw\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"executeSlashing\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getPendingSlashingRate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structIOperatorSetManager.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}]},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRequestedSlashingRate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structIOperatorSetManager.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}]},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalPendingSlashingRate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWithdrawabilityAndScalingFactorAtEpoch\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseRequestedBipsToSlash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetID\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"},{\"name\":\"bipsToIncrease\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"lastSlashed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorSetManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIOperatorSetManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingShareScalingFactor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"reduceRequestedBipsToSlash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetID\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"bipsToReduce\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"requestedSlashedBips\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"shareScalingFactor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"shareScalingFactorAtEpoch\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashedEpochHistory\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashingRequestIds\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"lastCreatedSlashingRequestId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"lastExecutedSlashingRequestId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashingRequests\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"slashingRate\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"scalingFactor\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RequestedBipsToSlashModified\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIOperatorSetManager.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}]},{\"name\":\"strategies\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"contractIStrategy[]\"},{\"name\":\"bipsToModify\",\"type\":\"int32\",\"indexed\":false,\"internalType\":\"int32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SlashingExecuted\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"slashingRate\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x60e06040523480156200001157600080fd5b5060405162002b1738038062002b1783398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c051612a1a620000fd600039600081816104c50152818161079c0152611a65015260006104ec0152600061026c0152612a1a6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635c975abb1161010457806390e7cde1116100a2578063e49a1e8411610071578063e49a1e841461050e578063ec65b53d14610521578063f2fde38b14610561578063fabc1cbc1461057457600080fd5b806390e7cde11461049a5780639d086ecb146104ad578063c78d4bcd146104c0578063df5cf723146104e757600080fd5b806379c415ec116100de57806379c415ec1461040a5780637ef639a61461041d578063886f1195146104765780638da5cb5b1461048957600080fd5b80635c975abb146103de5780636c0d75d0146103ef578063715018a61461040257600080fd5b80633dd9e7c5116101715780634dcaafb81161014b5780634dcaafb81461037d578063595c6a67146103905780635ab112d6146103985780635ac86ab7146103ab57600080fd5b80633dd9e7c5146102d85780633f2201bb146102eb5780634d54dc3c1461036a57600080fd5b8063287a96da116101ad578063287a96da14610229578063334f00d61461023c57806339b70e38146102675780633be2073b146102a657600080fd5b806310d67a2f146101d4578063136439dd146101e95780632421a64c146101fc575b600080fd5b6101e76101e2366004612045565b610587565b005b6101e76101f7366004612062565b610643565b61020f61020a366004612094565b610782565b60405163ffffffff90911681526020015b60405180910390f35b6101e76102373660046121c9565b610897565b61024f61024a36600461222e565b6109d3565b6040516001600160401b039091168152602001610220565b61028e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610220565b6102b96102b4366004612267565b610a23565b6040805192151583526001600160401b03909116602083015201610220565b61024f6102e636600461222e565b610aab565b61033e6102f9366004612267565b609860209081526000938452604080852082529284528284209052825290205463ffffffff8116906001600160401b03600160201b8204811691600160601b90041683565b6040805163ffffffff90941684526001600160401b039283166020850152911690820152606001610220565b61020f610378366004612094565b610b36565b6101e761038b3660046122ae565b610b67565b6101e7610fa6565b61020f6103a636600461222e565b61106d565b6103ce6103b9366004612304565b606654600160ff9092169190911b9081161490565b6040519015158152602001610220565b606654604051908152602001610220565b61020f6103fd366004612327565b611112565b6101e7611168565b6103ce610418366004612267565b61117c565b61045961042b36600461222e565b609760209081526000928352604080842090915290825290205463ffffffff80821691600160201b90041682565b6040805163ffffffff938416815292909116602083015201610220565b60655461028e906001600160a01b031681565b6033546001600160a01b031661028e565b61020f6104a8366004612267565b6111b0565b6101e76104bb366004612368565b61120f565b61028e7f000000000000000000000000000000000000000000000000000000000000000081565b61028e7f000000000000000000000000000000000000000000000000000000000000000081565b61024f61051c366004612267565b611411565b61020f61052f3660046123e9565b609b60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff1681565b6101e761056f366004612045565b611481565b6101e7610582366004612062565b6114f7565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe9190612438565b6001600160a01b0316336001600160a01b0316146106375760405162461bcd60e51b815260040161062e90612455565b60405180910390fd5b61064081611653565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa15801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af919061249f565b6106cb5760405162461bcd60e51b815260040161062e906124c1565b606654818116146107445760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c6974790000000000000000606482015260840161062e565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b604051633f76c6c760e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633f76c6c7906107d7908890879089908890600401612509565b602060405180830381865afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190612567565b6001600160a01b038087166000908152609b60209081526040808320938916835292815282822063ffffffff87168352905290812061ffff92909216919061086d6108683688900388018861258b565b61174a565b815260208101919091526040016000205461088e919063ffffffff166125fd565b95945050505050565b60008163ffffffff16116109215760405162461bcd60e51b815260206004820152604560248201527f536c61736865722e696e63726561736552657175657374656442697073546f5360448201527f6c6173683a2062697073546f496e637265617365206d75737420626520706f73606482015264697469766560d81b608482015260a40161062e565b6127108163ffffffff16106109b95760405162461bcd60e51b815260206004820152605260248201527f536c61736865722e696e63726561736552657175657374656442697073546f5360448201527f6c6173683a2062697073546f496e637265617365206d757374206265206c657360648201527139903a3430b7102124a829afa320a1aa27a960711b608482015260a40161062e565b6109cd8484846109c76117db565b856117eb565b50505050565b6001600160a01b0380831660009081526099602090815260408083209385168352929052908120546001600160401b031680610a1a57670de0b6b3a7640000915050610a1d565b90505b92915050565b6000806001670de0b6b3a76400008280610a3e898989611c67565b915091508015610a9d57610a53898984611d32565b6001600160a01b038a81166000908152609860209081526040808320938d16835292815282822063ffffffff8716835290522054909450600160601b90046001600160401b031692505b509197909650945050505050565b6001600160a01b03808316600081815260996020908152604080832094861680845294825280832054938352609882528083209483529390529182208291610b2e916001600160401b039091169083610b026117db565b63ffffffff168152602081019190915260400160002054600160201b90046001600160401b0316611d92565b949350505050565b600080610b4586868686610782565b90506305f5e10063ffffffff82161061088e57506305f5e10095945050505050565b610b7081611edf565b63ffffffff16610b7e6117db565b63ffffffff1611610c1d5760405162461bcd60e51b815260206004820152605760248201527f536c61736865722e65786563757465536c617368696e673a2063757272656e7460448201527f2065706f6368206d7573742062652067726561746572207468616e207468652060648201527f6d696e696d756d20657865637574696f6e2065706f6368000000000000000000608482015260a40161062e565b60005b82518110156109cd576000838281518110610c3d57610c3d612629565b6020908102919091018101516001600160a01b03808816600081815260988552604080822093851680835293865280822063ffffffff808b168452908752818320825160608101845290548083168083526001600160401b03600160201b8084048216858d0152600160601b909304168386015295855260978952838520968552959097529120549395509092610cd892900416600161263f565b63ffffffff1614610d515760405162461bcd60e51b815260206004820152603860248201527f536c61736865722e65786563757465536c617368696e673a206d75737420657860448201527f656375746520736c617368696e677320696e206f726465720000000000000000606482015260840161062e565b80516001600160a01b0380881660009081526097602090815260408083209387168352928152919020805463ffffffff909316600160201b0267ffffffff0000000019909316929092179091558101516305f5e1006001600160401b03919091161115610dc7576305f5e1006020820152610de0565b60208101516001600160401b0316610de0575050610f96565b6000610dec87846109d3565b90506000610dfe828460200151611d92565b9050609a6000896001600160a01b03166001600160a01b031681526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000208690806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555080609960008a6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b031602179055508083604001906001600160401b031690816001600160401b0316815250507f2f679597a08f229c142b2f79a954c91a30bbda82795ef8dee2775b84db9699248689868660200151604051610f89949392919063ffffffff9490941684526001600160a01b039283166020850152911660408301526001600160401b0316606082015260800190565b60405180910390a1505050505b610f9f81612667565b9050610c20565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611012919061249f565b61102e5760405162461bcd60e51b815260040161062e906124c1565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6001600160a01b038083166000908152609a60209081526040808320938516835292905290812054806110a4576000915050610a1d565b6001600160a01b038085166000908152609a602090815260408083209387168352929052206110d4600183612682565b815481106110e4576110e4612629565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16915050610a1d565b609a602052826000526040600020602052816000526040600020818154811061113a57600080fd5b906000526020600020906008918282040191900660040292509250509054906101000a900463ffffffff1681565b611170611eec565b61117a6000611f46565b565b60006001818061118d878787611c67565b9150915080156111a5576111a2878784611d32565b92505b509095945050505050565b6001600160a01b038381166000908152609860209081526040808320938616835292815282822063ffffffff85168352905290812054600160201b90046001600160401b03166305f5e1008110610b2e57506305f5e100949350505050565b60006112196117db565b90508063ffffffff168363ffffffff16148061124a575063ffffffff811661124284600161263f565b63ffffffff16145b6112d65760405162461bcd60e51b815260206004820152605160248201527f536c61736865722e72656475636552657175657374656442697073546f536c6160448201527f73683a2063616e206f6e6c792072656475636520666f722063757272656e74206064820152700dee440e0e4caecd2deeae640cae0dec6d607b1b608482015260a40161062e565b60008263ffffffff161161135c5760405162461bcd60e51b815260206004820152604160248201527f536c61736865722e72656475636552657175657374656442697073546f536c6160448201527f73683a2062697073546f526564756365206d757374206265206e6567617469766064820152606560f81b608482015260a40161062e565b63800000008263ffffffff16106113f45760405162461bcd60e51b815260206004820152605060248201527f536c61736865722e72656475636552657175657374656442697073546f536c6160448201527f73683a2062697073546f526564756365206d757374206265206c65737320746860648201526f30b71036b4b734b6bab69034b73a199960811b608482015260a40161062e565b6114098686868661140487612699565b6117eb565b505050505050565b6000670de0b6b3a76400008180611429878787611c67565b9150915080156111a557506001600160a01b03958616600090815260986020908152604080832097909816825295865286812063ffffffff92909216815294525050502054600160601b90046001600160401b031690565b611489611eec565b6001600160a01b0381166114ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062e565b61064081611f46565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e9190612438565b6001600160a01b0316336001600160a01b03161461159e5760405162461bcd60e51b815260040161062e90612455565b60665419811960665419161461161c5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c6974790000000000000000606482015260840161062e565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610777565b6001600160a01b0381166116e15760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a40161062e565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001808252818301909252600091829190816020015b604080518082019091526000808252602082015281526020019060019003908161176457905050905082816000815181106117a1576117a1612629565b6020026020010181905250806040516020016117bd91906126df565b60405160208183030381529060405280519060200120915050919050565b60006117e642611f98565b905090565b8060030b60001415611867576040805162461bcd60e51b81526020600482015260248101919091527f536c61736865722e5f6d6f6469667952657175657374656442697073546f536c60448201527f6173683a2063616e6e6f74206d6f6469667920736c617368696e672062792030606482015260840161062e565b604080518082019091523381526001600160e01b031985166020820152600061188f8261174a565b905060005b8551811015611c1e5760008682815181106118b1576118b1612629565b6020908102919091018101516001600160a01b03808c166000908152609b84526040808220928416825291845281812063ffffffff808c1683529085528282208883529094529081205491935091169061190b878361272c565b905060008160030b12156119295761192282612699565b9650600090505b6001600160a01b038b81166000818152609b6020908152604080832094881680845294825280832063ffffffff8e81168086529184528285208c86528452828520805463ffffffff1916898316179055948452609883528184209584529482528083209483529381529083902083516060810185529054928316808252600160201b84046001600160401b0390811693830193909352600160601b90930490911692810192909252611a4e576001600160a01b03808d166000908152609760209081526040808320938816835292905290812054611a0e9063ffffffff16600161263f565b6001600160a01b03808f166000908152609760209081526040808320938a16835292905220805463ffffffff90921663ffffffff19909216821790558252505b604051633f76c6c760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633f76c6c790611aa0908f908b9089908f90600401612775565b602060405180830381865afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190612567565b61ffff168860030b611af391906127b2565b8160200151611b029190612849565b81602001906001600160401b031690816001600160401b03168152505080609860008e6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008b63ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160401b0302191690836001600160401b03160217905550604082015181600001600c6101000a8154816001600160401b0302191690836001600160401b031602179055509050505050505080611c1790612667565b9050611894565b507f51b15dc60a707d9c43660fdd6af7cf86060e2778638d04ef462faa56241ea6bf8488848887604051611c56959493929190612891565b60405180910390a150505050505050565b6001600160a01b038084166000908152609a602090815260408083209386168352929052908120548190819081905b8015611d25576001600160a01b038089166000908152609a60209081526040808320938b16835292905220611ccc600183612682565b81548110611cdc57611cdc612629565b6000918252602090912060088204015460079091166004026101000a900463ffffffff908116935086168311611d155760019150611d25565b611d1e81612910565b9050611c96565b5090969095509350505050565b6001600160a01b03928316600081815260976020908152604080832095909616808352948152858220549282526098815285822094825293845284812063ffffffff93841682529093529290912054600160201b90920481169116111590565b60006001600160401b038216611de05760405162461bcd60e51b815260206004820152601360248201527263616e6e6f7420736c61736820666f7220302560681b604482015260640161062e565b6305f5e1006001600160401b0383161115611e495760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f7420736c617368206d6f7265207468616e2031303025206174206f6044820152626e636560e81b606482015260840161062e565b60006001600160401b0383166305f5e1001480611ea657506001600160401b03808416908516611e8d670de0b6b3a76400006bffffffffffffffffffffffff612927565b611e999060001961295c565b611ea3919061295c565b10155b15611eb957506001600160401b03610a1a565b611ec7836305f5e100612970565b611ed56305f5e10086612998565b610b2e91906129be565b6000610a1d82600261263f565b6033546001600160a01b0316331461117a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000635fc630408210156120145760405162461bcd60e51b815260206004820152603d60248201527f45706f63685574696c732e67657445706f636846726f6d54696d657374616d7060448201527f3a2074696d657374616d70206973206265666f72652067656e65736973000000606482015260840161062e565b62093a80612026635fc6304084612682565b610a1d919061295c565b6001600160a01b038116811461064057600080fd5b60006020828403121561205757600080fd5b8135610a1a81612030565b60006020828403121561207457600080fd5b5035919050565b803563ffffffff8116811461208f57600080fd5b919050565b60008060008084860360a08112156120ab57600080fd5b85356120b681612030565b945060208601356120c681612030565b93506040603f19820112156120da57600080fd5b506040850191506120ed6080860161207b565b905092959194509250565b80356001600160e01b03198116811461208f57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261213757600080fd5b813560206001600160401b038083111561215357612153612110565b8260051b604051601f19603f8301168101818110848211171561217857612178612110565b60405293845285810183019383810192508785111561219657600080fd5b83870191505b848210156121be5781356121af81612030565b8352918301919083019061219c565b979650505050505050565b600080600080608085870312156121df57600080fd5b84356121ea81612030565b93506121f8602086016120f8565b925060408501356001600160401b0381111561221357600080fd5b61221f87828801612126565b9250506120ed6060860161207b565b6000806040838503121561224157600080fd5b823561224c81612030565b9150602083013561225c81612030565b809150509250929050565b60008060006060848603121561227c57600080fd5b833561228781612030565b9250602084013561229781612030565b91506122a56040850161207b565b90509250925092565b6000806000606084860312156122c357600080fd5b83356122ce81612030565b925060208401356001600160401b038111156122e957600080fd5b6122f586828701612126565b9250506122a56040850161207b565b60006020828403121561231657600080fd5b813560ff81168114610a1a57600080fd5b60008060006060848603121561233c57600080fd5b833561234781612030565b9250602084013561235781612030565b929592945050506040919091013590565b600080600080600060a0868803121561238057600080fd5b853561238b81612030565b9450612399602087016120f8565b935060408601356001600160401b038111156123b457600080fd5b6123c088828901612126565b9350506123cf6060870161207b565b91506123dd6080870161207b565b90509295509295909350565b600080600080608085870312156123ff57600080fd5b843561240a81612030565b9350602085013561241a81612030565b92506124286040860161207b565b9396929550929360600135925050565b60006020828403121561244a57600080fd5b8151610a1a81612030565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b6000602082840312156124b157600080fd5b81518015158114610a1a57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b6001600160a01b03858116825260a0820190853561252681612030565b81811660208501525063ffffffff60e01b612543602088016120f8565b16604084015280851660608401525063ffffffff8316608083015295945050505050565b60006020828403121561257957600080fd5b815161ffff81168114610a1a57600080fd5b60006040828403121561259d57600080fd5b604051604081018181106001600160401b03821117156125bf576125bf612110565b60405282356125cd81612030565b81526125db602084016120f8565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851681830481118215151615612620576126206125e7565b02949350505050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681851680830382111561265e5761265e6125e7565b01949350505050565b600060001982141561267b5761267b6125e7565b5060010190565b600082821015612694576126946125e7565b500390565b60008160030b637fffffff198114156126b4576126b46125e7565b60000392915050565b80516001600160a01b031682526020908101516001600160e01b031916910152565b602080825282518282018190526000919060409081850190868401855b8281101561271f5761270f8483516126bd565b92840192908501906001016126fc565b5091979650505050505050565b60008160030b8360030b6000821282637fffffff03821381151615612753576127536125e7565b82637fffffff1903821281161561276c5761276c6125e7565b50019392505050565b6001600160a01b03858116825260a082019061279460208401876126bd565b80851660608401525063ffffffff8316608083015295945050505050565b60008160070b8360070b677fffffffffffffff6000821360008413838304851182821616156127e3576127e36125e7565b677fffffffffffffff196000851282811687830587121615612807576128076125e7565b60008712925085820587128484161615612823576128236125e7565b85850587128184161615612839576128396125e7565b5050509290910295945050505050565b60008160070b8360070b6000821282677fffffffffffffff03821381151615612874576128746125e7565b82677fffffffffffffff1903821281161561276c5761276c6125e7565b600060c0820163ffffffff88168352602060018060a01b03808916828601526128bd60408601896126bd565b60c060808601528651928390528187019260e086019060005b818110156128f45785518416835294840194918401916001016128d6565b5050809450505050508260030b60a08301529695505050505050565b60008161291f5761291f6125e7565b506000190190565b6000816000190483118215151615612941576129416125e7565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261296b5761296b612946565b500490565b60006001600160401b0383811690831681811015612990576129906125e7565b039392505050565b60006001600160401b0380831681851681830481118215151615612620576126206125e7565b60006001600160401b03808416806129d8576129d8612946565b9216919091049291505056fea2646970667358221220cefc068490f4fd35869e596174bfab1f011fb4a666619d26f06a01d7f6d26ddf64736f6c634300080c0033",
}

// SlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use SlasherMetaData.ABI instead.
var SlasherABI = SlasherMetaData.ABI

// SlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlasherMetaData.Bin instead.
var SlasherBin = SlasherMetaData.Bin

// DeploySlasher deploys a new Ethereum contract, binding an instance of Slasher to it.
func DeploySlasher(auth *bind.TransactOpts, backend bind.ContractBackend, _strategyManager common.Address, _delegationManager common.Address, _operatorSetManager common.Address) (common.Address, *types.Transaction, *Slasher, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlasherBin), backend, _strategyManager, _delegationManager, _operatorSetManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// Slasher is an auto generated Go binding around an Ethereum contract.
type Slasher struct {
	SlasherCaller     // Read-only binding to the contract
	SlasherTransactor // Write-only binding to the contract
	SlasherFilterer   // Log filterer for contract events
}

// SlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlasherSession struct {
	Contract     *Slasher          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlasherCallerSession struct {
	Contract *SlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlasherTransactorSession struct {
	Contract     *SlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlasherRaw struct {
	Contract *Slasher // Generic contract binding to access the raw methods on
}

// SlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlasherCallerRaw struct {
	Contract *SlasherCaller // Generic read-only contract binding to access the raw methods on
}

// SlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlasherTransactorRaw struct {
	Contract *SlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlasher creates a new instance of Slasher, bound to a specific deployed contract.
func NewSlasher(address common.Address, backend bind.ContractBackend) (*Slasher, error) {
	contract, err := bindSlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// NewSlasherCaller creates a new read-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherCaller(address common.Address, caller bind.ContractCaller) (*SlasherCaller, error) {
	contract, err := bindSlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherCaller{contract: contract}, nil
}

// NewSlasherTransactor creates a new write-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*SlasherTransactor, error) {
	contract, err := bindSlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherTransactor{contract: contract}, nil
}

// NewSlasherFilterer creates a new log filterer instance of Slasher, bound to a specific deployed contract.
func NewSlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*SlasherFilterer, error) {
	contract, err := bindSlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlasherFilterer{contract: contract}, nil
}

// bindSlasher binds a generic wrapper to an already deployed contract.
func bindSlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.SlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transact(opts, method, params...)
}

// CanWithdraw is a free data retrieval call binding the contract method 0x79c415ec.
//
// Solidity: function canWithdraw(address operator, address strategy, uint32 epoch) view returns(bool)
func (_Slasher *SlasherCaller) CanWithdraw(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (bool, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "canWithdraw", operator, strategy, epoch)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanWithdraw is a free data retrieval call binding the contract method 0x79c415ec.
//
// Solidity: function canWithdraw(address operator, address strategy, uint32 epoch) view returns(bool)
func (_Slasher *SlasherSession) CanWithdraw(operator common.Address, strategy common.Address, epoch uint32) (bool, error) {
	return _Slasher.Contract.CanWithdraw(&_Slasher.CallOpts, operator, strategy, epoch)
}

// CanWithdraw is a free data retrieval call binding the contract method 0x79c415ec.
//
// Solidity: function canWithdraw(address operator, address strategy, uint32 epoch) view returns(bool)
func (_Slasher *SlasherCallerSession) CanWithdraw(operator common.Address, strategy common.Address, epoch uint32) (bool, error) {
	return _Slasher.Contract.CanWithdraw(&_Slasher.CallOpts, operator, strategy, epoch)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCallerSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// GetPendingSlashingRate is a free data retrieval call binding the contract method 0x4d54dc3c.
//
// Solidity: function getPendingSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCaller) GetPendingSlashingRate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getPendingSlashingRate", operator, strategy, operatorSet, epoch)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetPendingSlashingRate is a free data retrieval call binding the contract method 0x4d54dc3c.
//
// Solidity: function getPendingSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherSession) GetPendingSlashingRate(operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetPendingSlashingRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetPendingSlashingRate is a free data retrieval call binding the contract method 0x4d54dc3c.
//
// Solidity: function getPendingSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCallerSession) GetPendingSlashingRate(operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetPendingSlashingRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetRequestedSlashingRate is a free data retrieval call binding the contract method 0x2421a64c.
//
// Solidity: function getRequestedSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCaller) GetRequestedSlashingRate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getRequestedSlashingRate", operator, strategy, operatorSet, epoch)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetRequestedSlashingRate is a free data retrieval call binding the contract method 0x2421a64c.
//
// Solidity: function getRequestedSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherSession) GetRequestedSlashingRate(operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetRequestedSlashingRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetRequestedSlashingRate is a free data retrieval call binding the contract method 0x2421a64c.
//
// Solidity: function getRequestedSlashingRate(address operator, address strategy, (address,bytes4) operatorSet, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCallerSession) GetRequestedSlashingRate(operator common.Address, strategy common.Address, operatorSet IOperatorSetManagerOperatorSet, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetRequestedSlashingRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetTotalPendingSlashingRate is a free data retrieval call binding the contract method 0x90e7cde1.
//
// Solidity: function getTotalPendingSlashingRate(address operator, address strategy, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCaller) GetTotalPendingSlashingRate(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getTotalPendingSlashingRate", operator, strategy, epoch)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetTotalPendingSlashingRate is a free data retrieval call binding the contract method 0x90e7cde1.
//
// Solidity: function getTotalPendingSlashingRate(address operator, address strategy, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherSession) GetTotalPendingSlashingRate(operator common.Address, strategy common.Address, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetTotalPendingSlashingRate(&_Slasher.CallOpts, operator, strategy, epoch)
}

// GetTotalPendingSlashingRate is a free data retrieval call binding the contract method 0x90e7cde1.
//
// Solidity: function getTotalPendingSlashingRate(address operator, address strategy, uint32 epoch) view returns(uint32)
func (_Slasher *SlasherCallerSession) GetTotalPendingSlashingRate(operator common.Address, strategy common.Address, epoch uint32) (uint32, error) {
	return _Slasher.Contract.GetTotalPendingSlashingRate(&_Slasher.CallOpts, operator, strategy, epoch)
}

// GetWithdrawabilityAndScalingFactorAtEpoch is a free data retrieval call binding the contract method 0x3be2073b.
//
// Solidity: function getWithdrawabilityAndScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(bool, uint64)
func (_Slasher *SlasherCaller) GetWithdrawabilityAndScalingFactorAtEpoch(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (bool, uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getWithdrawabilityAndScalingFactorAtEpoch", operator, strategy, epoch)

	if err != nil {
		return *new(bool), *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return out0, out1, err

}

// GetWithdrawabilityAndScalingFactorAtEpoch is a free data retrieval call binding the contract method 0x3be2073b.
//
// Solidity: function getWithdrawabilityAndScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(bool, uint64)
func (_Slasher *SlasherSession) GetWithdrawabilityAndScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (bool, uint64, error) {
	return _Slasher.Contract.GetWithdrawabilityAndScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// GetWithdrawabilityAndScalingFactorAtEpoch is a free data retrieval call binding the contract method 0x3be2073b.
//
// Solidity: function getWithdrawabilityAndScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(bool, uint64)
func (_Slasher *SlasherCallerSession) GetWithdrawabilityAndScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (bool, uint64, error) {
	return _Slasher.Contract.GetWithdrawabilityAndScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCaller) LastSlashed(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "lastSlashed", operator, strategy)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCallerSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// OperatorSetManager is a free data retrieval call binding the contract method 0xc78d4bcd.
//
// Solidity: function operatorSetManager() view returns(address)
func (_Slasher *SlasherCaller) OperatorSetManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "operatorSetManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OperatorSetManager is a free data retrieval call binding the contract method 0xc78d4bcd.
//
// Solidity: function operatorSetManager() view returns(address)
func (_Slasher *SlasherSession) OperatorSetManager() (common.Address, error) {
	return _Slasher.Contract.OperatorSetManager(&_Slasher.CallOpts)
}

// OperatorSetManager is a free data retrieval call binding the contract method 0xc78d4bcd.
//
// Solidity: function operatorSetManager() view returns(address)
func (_Slasher *SlasherCallerSession) OperatorSetManager() (common.Address, error) {
	return _Slasher.Contract.OperatorSetManager(&_Slasher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCallerSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCallerSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCallerSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCallerSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// PendingShareScalingFactor is a free data retrieval call binding the contract method 0x3dd9e7c5.
//
// Solidity: function pendingShareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCaller) PendingShareScalingFactor(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "pendingShareScalingFactor", operator, strategy)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// PendingShareScalingFactor is a free data retrieval call binding the contract method 0x3dd9e7c5.
//
// Solidity: function pendingShareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherSession) PendingShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.PendingShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// PendingShareScalingFactor is a free data retrieval call binding the contract method 0x3dd9e7c5.
//
// Solidity: function pendingShareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCallerSession) PendingShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.PendingShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// RequestedSlashedBips is a free data retrieval call binding the contract method 0xec65b53d.
//
// Solidity: function requestedSlashedBips(address , address , uint32 , bytes32 ) view returns(uint32)
func (_Slasher *SlasherCaller) RequestedSlashedBips(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 uint32, arg3 [32]byte) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "requestedSlashedBips", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// RequestedSlashedBips is a free data retrieval call binding the contract method 0xec65b53d.
//
// Solidity: function requestedSlashedBips(address , address , uint32 , bytes32 ) view returns(uint32)
func (_Slasher *SlasherSession) RequestedSlashedBips(arg0 common.Address, arg1 common.Address, arg2 uint32, arg3 [32]byte) (uint32, error) {
	return _Slasher.Contract.RequestedSlashedBips(&_Slasher.CallOpts, arg0, arg1, arg2, arg3)
}

// RequestedSlashedBips is a free data retrieval call binding the contract method 0xec65b53d.
//
// Solidity: function requestedSlashedBips(address , address , uint32 , bytes32 ) view returns(uint32)
func (_Slasher *SlasherCallerSession) RequestedSlashedBips(arg0 common.Address, arg1 common.Address, arg2 uint32, arg3 [32]byte) (uint32, error) {
	return _Slasher.Contract.RequestedSlashedBips(&_Slasher.CallOpts, arg0, arg1, arg2, arg3)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactor(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactor", operator, strategy)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactorAtEpoch(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactorAtEpoch", operator, strategy, epoch)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// SlashedEpochHistory is a free data retrieval call binding the contract method 0x6c0d75d0.
//
// Solidity: function slashedEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCaller) SlashedEpochHistory(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashedEpochHistory", arg0, arg1, arg2)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SlashedEpochHistory is a free data retrieval call binding the contract method 0x6c0d75d0.
//
// Solidity: function slashedEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherSession) SlashedEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashedEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashedEpochHistory is a free data retrieval call binding the contract method 0x6c0d75d0.
//
// Solidity: function slashedEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCallerSession) SlashedEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashedEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingRequestIds is a free data retrieval call binding the contract method 0x7ef639a6.
//
// Solidity: function slashingRequestIds(address , address ) view returns(uint32 lastCreatedSlashingRequestId, uint32 lastExecutedSlashingRequestId)
func (_Slasher *SlasherCaller) SlashingRequestIds(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (struct {
	LastCreatedSlashingRequestId  uint32
	LastExecutedSlashingRequestId uint32
}, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingRequestIds", arg0, arg1)

	outstruct := new(struct {
		LastCreatedSlashingRequestId  uint32
		LastExecutedSlashingRequestId uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LastCreatedSlashingRequestId = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.LastExecutedSlashingRequestId = *abi.ConvertType(out[1], new(uint32)).(*uint32)

	return *outstruct, err

}

// SlashingRequestIds is a free data retrieval call binding the contract method 0x7ef639a6.
//
// Solidity: function slashingRequestIds(address , address ) view returns(uint32 lastCreatedSlashingRequestId, uint32 lastExecutedSlashingRequestId)
func (_Slasher *SlasherSession) SlashingRequestIds(arg0 common.Address, arg1 common.Address) (struct {
	LastCreatedSlashingRequestId  uint32
	LastExecutedSlashingRequestId uint32
}, error) {
	return _Slasher.Contract.SlashingRequestIds(&_Slasher.CallOpts, arg0, arg1)
}

// SlashingRequestIds is a free data retrieval call binding the contract method 0x7ef639a6.
//
// Solidity: function slashingRequestIds(address , address ) view returns(uint32 lastCreatedSlashingRequestId, uint32 lastExecutedSlashingRequestId)
func (_Slasher *SlasherCallerSession) SlashingRequestIds(arg0 common.Address, arg1 common.Address) (struct {
	LastCreatedSlashingRequestId  uint32
	LastExecutedSlashingRequestId uint32
}, error) {
	return _Slasher.Contract.SlashingRequestIds(&_Slasher.CallOpts, arg0, arg1)
}

// SlashingRequests is a free data retrieval call binding the contract method 0x3f2201bb.
//
// Solidity: function slashingRequests(address , address , uint32 ) view returns(uint32 id, uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCaller) SlashingRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	Id            uint32
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingRequests", arg0, arg1, arg2)

	outstruct := new(struct {
		Id            uint32
		SlashingRate  uint64
		ScalingFactor uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.SlashingRate = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.ScalingFactor = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

// SlashingRequests is a free data retrieval call binding the contract method 0x3f2201bb.
//
// Solidity: function slashingRequests(address , address , uint32 ) view returns(uint32 id, uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherSession) SlashingRequests(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	Id            uint32
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingRequests(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingRequests is a free data retrieval call binding the contract method 0x3f2201bb.
//
// Solidity: function slashingRequests(address , address , uint32 ) view returns(uint32 id, uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCallerSession) SlashingRequests(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	Id            uint32
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingRequests(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCallerSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// ExecuteSlashing is a paid mutator transaction binding the contract method 0x4dcaafb8.
//
// Solidity: function executeSlashing(address operator, address[] strategies, uint32 epoch) returns()
func (_Slasher *SlasherTransactor) ExecuteSlashing(opts *bind.TransactOpts, operator common.Address, strategies []common.Address, epoch uint32) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "executeSlashing", operator, strategies, epoch)
}

// ExecuteSlashing is a paid mutator transaction binding the contract method 0x4dcaafb8.
//
// Solidity: function executeSlashing(address operator, address[] strategies, uint32 epoch) returns()
func (_Slasher *SlasherSession) ExecuteSlashing(operator common.Address, strategies []common.Address, epoch uint32) (*types.Transaction, error) {
	return _Slasher.Contract.ExecuteSlashing(&_Slasher.TransactOpts, operator, strategies, epoch)
}

// ExecuteSlashing is a paid mutator transaction binding the contract method 0x4dcaafb8.
//
// Solidity: function executeSlashing(address operator, address[] strategies, uint32 epoch) returns()
func (_Slasher *SlasherTransactorSession) ExecuteSlashing(operator common.Address, strategies []common.Address, epoch uint32) (*types.Transaction, error) {
	return _Slasher.Contract.ExecuteSlashing(&_Slasher.TransactOpts, operator, strategies, epoch)
}

// IncreaseRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x287a96da.
//
// Solidity: function increaseRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 bipsToIncrease) returns()
func (_Slasher *SlasherTransactor) IncreaseRequestedBipsToSlash(opts *bind.TransactOpts, operator common.Address, operatorSetID [4]byte, strategies []common.Address, bipsToIncrease uint32) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "increaseRequestedBipsToSlash", operator, operatorSetID, strategies, bipsToIncrease)
}

// IncreaseRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x287a96da.
//
// Solidity: function increaseRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 bipsToIncrease) returns()
func (_Slasher *SlasherSession) IncreaseRequestedBipsToSlash(operator common.Address, operatorSetID [4]byte, strategies []common.Address, bipsToIncrease uint32) (*types.Transaction, error) {
	return _Slasher.Contract.IncreaseRequestedBipsToSlash(&_Slasher.TransactOpts, operator, operatorSetID, strategies, bipsToIncrease)
}

// IncreaseRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x287a96da.
//
// Solidity: function increaseRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 bipsToIncrease) returns()
func (_Slasher *SlasherTransactorSession) IncreaseRequestedBipsToSlash(operator common.Address, operatorSetID [4]byte, strategies []common.Address, bipsToIncrease uint32) (*types.Transaction, error) {
	return _Slasher.Contract.IncreaseRequestedBipsToSlash(&_Slasher.TransactOpts, operator, operatorSetID, strategies, bipsToIncrease)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactorSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// ReduceRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x9d086ecb.
//
// Solidity: function reduceRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 epoch, uint32 bipsToReduce) returns()
func (_Slasher *SlasherTransactor) ReduceRequestedBipsToSlash(opts *bind.TransactOpts, operator common.Address, operatorSetID [4]byte, strategies []common.Address, epoch uint32, bipsToReduce uint32) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "reduceRequestedBipsToSlash", operator, operatorSetID, strategies, epoch, bipsToReduce)
}

// ReduceRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x9d086ecb.
//
// Solidity: function reduceRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 epoch, uint32 bipsToReduce) returns()
func (_Slasher *SlasherSession) ReduceRequestedBipsToSlash(operator common.Address, operatorSetID [4]byte, strategies []common.Address, epoch uint32, bipsToReduce uint32) (*types.Transaction, error) {
	return _Slasher.Contract.ReduceRequestedBipsToSlash(&_Slasher.TransactOpts, operator, operatorSetID, strategies, epoch, bipsToReduce)
}

// ReduceRequestedBipsToSlash is a paid mutator transaction binding the contract method 0x9d086ecb.
//
// Solidity: function reduceRequestedBipsToSlash(address operator, bytes4 operatorSetID, address[] strategies, uint32 epoch, uint32 bipsToReduce) returns()
func (_Slasher *SlasherTransactorSession) ReduceRequestedBipsToSlash(operator common.Address, operatorSetID [4]byte, strategies []common.Address, epoch uint32, bipsToReduce uint32) (*types.Transaction, error) {
	return _Slasher.Contract.ReduceRequestedBipsToSlash(&_Slasher.TransactOpts, operator, operatorSetID, strategies, epoch, bipsToReduce)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// SlasherInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Slasher contract.
type SlasherInitializedIterator struct {
	Event *SlasherInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherInitialized represents a Initialized event raised by the Slasher contract.
type SlasherInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) FilterInitialized(opts *bind.FilterOpts) (*SlasherInitializedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SlasherInitializedIterator{contract: _Slasher.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SlasherInitialized) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherInitialized)
				if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) ParseInitialized(log types.Log) (*SlasherInitialized, error) {
	event := new(SlasherInitialized)
	if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Slasher contract.
type SlasherOwnershipTransferredIterator struct {
	Event *SlasherOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherOwnershipTransferred represents a OwnershipTransferred event raised by the Slasher contract.
type SlasherOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SlasherOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SlasherOwnershipTransferredIterator{contract: _Slasher.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SlasherOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherOwnershipTransferred)
				if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) ParseOwnershipTransferred(log types.Log) (*SlasherOwnershipTransferred, error) {
	event := new(SlasherOwnershipTransferred)
	if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Slasher contract.
type SlasherPausedIterator struct {
	Event *SlasherPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPaused represents a Paused event raised by the Slasher contract.
type SlasherPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*SlasherPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherPausedIterator{contract: _Slasher.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SlasherPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPaused)
				if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParsePaused(log types.Log) (*SlasherPaused, error) {
	event := new(SlasherPaused)
	if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the Slasher contract.
type SlasherPauserRegistrySetIterator struct {
	Event *SlasherPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPauserRegistrySet represents a PauserRegistrySet event raised by the Slasher contract.
type SlasherPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*SlasherPauserRegistrySetIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &SlasherPauserRegistrySetIterator{contract: _Slasher.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *SlasherPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPauserRegistrySet)
				if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) ParsePauserRegistrySet(log types.Log) (*SlasherPauserRegistrySet, error) {
	event := new(SlasherPauserRegistrySet)
	if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherRequestedBipsToSlashModifiedIterator is returned from FilterRequestedBipsToSlashModified and is used to iterate over the raw logs and unpacked data for RequestedBipsToSlashModified events raised by the Slasher contract.
type SlasherRequestedBipsToSlashModifiedIterator struct {
	Event *SlasherRequestedBipsToSlashModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherRequestedBipsToSlashModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherRequestedBipsToSlashModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherRequestedBipsToSlashModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherRequestedBipsToSlashModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherRequestedBipsToSlashModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherRequestedBipsToSlashModified represents a RequestedBipsToSlashModified event raised by the Slasher contract.
type SlasherRequestedBipsToSlashModified struct {
	Epoch        uint32
	Operator     common.Address
	OperatorSet  IOperatorSetManagerOperatorSet
	Strategies   []common.Address
	BipsToModify int32
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRequestedBipsToSlashModified is a free log retrieval operation binding the contract event 0x51b15dc60a707d9c43660fdd6af7cf86060e2778638d04ef462faa56241ea6bf.
//
// Solidity: event RequestedBipsToSlashModified(uint32 epoch, address operator, (address,bytes4) operatorSet, address[] strategies, int32 bipsToModify)
func (_Slasher *SlasherFilterer) FilterRequestedBipsToSlashModified(opts *bind.FilterOpts) (*SlasherRequestedBipsToSlashModifiedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "RequestedBipsToSlashModified")
	if err != nil {
		return nil, err
	}
	return &SlasherRequestedBipsToSlashModifiedIterator{contract: _Slasher.contract, event: "RequestedBipsToSlashModified", logs: logs, sub: sub}, nil
}

// WatchRequestedBipsToSlashModified is a free log subscription operation binding the contract event 0x51b15dc60a707d9c43660fdd6af7cf86060e2778638d04ef462faa56241ea6bf.
//
// Solidity: event RequestedBipsToSlashModified(uint32 epoch, address operator, (address,bytes4) operatorSet, address[] strategies, int32 bipsToModify)
func (_Slasher *SlasherFilterer) WatchRequestedBipsToSlashModified(opts *bind.WatchOpts, sink chan<- *SlasherRequestedBipsToSlashModified) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "RequestedBipsToSlashModified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherRequestedBipsToSlashModified)
				if err := _Slasher.contract.UnpackLog(event, "RequestedBipsToSlashModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedBipsToSlashModified is a log parse operation binding the contract event 0x51b15dc60a707d9c43660fdd6af7cf86060e2778638d04ef462faa56241ea6bf.
//
// Solidity: event RequestedBipsToSlashModified(uint32 epoch, address operator, (address,bytes4) operatorSet, address[] strategies, int32 bipsToModify)
func (_Slasher *SlasherFilterer) ParseRequestedBipsToSlashModified(log types.Log) (*SlasherRequestedBipsToSlashModified, error) {
	event := new(SlasherRequestedBipsToSlashModified)
	if err := _Slasher.contract.UnpackLog(event, "RequestedBipsToSlashModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherSlashingExecutedIterator is returned from FilterSlashingExecuted and is used to iterate over the raw logs and unpacked data for SlashingExecuted events raised by the Slasher contract.
type SlasherSlashingExecutedIterator struct {
	Event *SlasherSlashingExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherSlashingExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherSlashingExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherSlashingExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherSlashingExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherSlashingExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherSlashingExecuted represents a SlashingExecuted event raised by the Slasher contract.
type SlasherSlashingExecuted struct {
	Epoch        uint32
	Operator     common.Address
	Strategy     common.Address
	SlashingRate uint64
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingExecuted is a free log retrieval operation binding the contract event 0x2f679597a08f229c142b2f79a954c91a30bbda82795ef8dee2775b84db969924.
//
// Solidity: event SlashingExecuted(uint32 epoch, address operator, address strategy, uint64 slashingRate)
func (_Slasher *SlasherFilterer) FilterSlashingExecuted(opts *bind.FilterOpts) (*SlasherSlashingExecutedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "SlashingExecuted")
	if err != nil {
		return nil, err
	}
	return &SlasherSlashingExecutedIterator{contract: _Slasher.contract, event: "SlashingExecuted", logs: logs, sub: sub}, nil
}

// WatchSlashingExecuted is a free log subscription operation binding the contract event 0x2f679597a08f229c142b2f79a954c91a30bbda82795ef8dee2775b84db969924.
//
// Solidity: event SlashingExecuted(uint32 epoch, address operator, address strategy, uint64 slashingRate)
func (_Slasher *SlasherFilterer) WatchSlashingExecuted(opts *bind.WatchOpts, sink chan<- *SlasherSlashingExecuted) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "SlashingExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherSlashingExecuted)
				if err := _Slasher.contract.UnpackLog(event, "SlashingExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingExecuted is a log parse operation binding the contract event 0x2f679597a08f229c142b2f79a954c91a30bbda82795ef8dee2775b84db969924.
//
// Solidity: event SlashingExecuted(uint32 epoch, address operator, address strategy, uint64 slashingRate)
func (_Slasher *SlasherFilterer) ParseSlashingExecuted(log types.Log) (*SlasherSlashingExecuted, error) {
	event := new(SlasherSlashingExecuted)
	if err := _Slasher.contract.UnpackLog(event, "SlashingExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Slasher contract.
type SlasherUnpausedIterator struct {
	Event *SlasherUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherUnpaused represents a Unpaused event raised by the Slasher contract.
type SlasherUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*SlasherUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherUnpausedIterator{contract: _Slasher.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SlasherUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherUnpaused)
				if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParseUnpaused(log types.Log) (*SlasherUnpaused, error) {
	event := new(SlasherUnpaused)
	if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
