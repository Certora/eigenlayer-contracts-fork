// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Slasher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISignatureUtilsSignatureWithExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithExpiry struct {
	Signature []byte
	Expiry    *big.Int
}

// ISlasherOperatorSet is an auto generated low-level Go binding around an user-defined struct.
type ISlasherOperatorSet struct {
	Avs common.Address
	Id  uint32
}

// SlasherMagnitudeAdjustmentParam is an auto generated low-level Go binding around an user-defined struct.
type SlasherMagnitudeAdjustmentParam struct {
	Strategy                   common.Address
	OperatorSetMagnitudeParams []SlasherOperatorSetMagnitudeParam
}

// SlasherMagnitudeUpdate is an auto generated low-level Go binding around an user-defined struct.
type SlasherMagnitudeUpdate struct {
	Timestamp uint32
	Magnitude uint64
}

// SlasherOperatorSetMagnitudeParam is an auto generated low-level Go binding around an user-defined struct.
type SlasherOperatorSetMagnitudeParam struct {
	OperatorSet   ISlasherOperatorSet
	MagnitudeDiff uint64
}

// SlasherTotalAndNonslashableUpdate is an auto generated low-level Go binding around an user-defined struct.
type SlasherTotalAndNonslashableUpdate struct {
	Timestamp             uint32
	TotalMagnitude        uint64
	NonSlashableMagnitude uint64
}

// SlasherMetaData contains all meta data concerning the Slasher contract.
var SlasherMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_strategyManager\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkPendingUpdates\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAllocatorFor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMagnitudeUpdate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"magnitudeUpdate\",\"type\":\"tuple\",\"internalType\":\"structSlasher.MagnitudeUpdate\",\"components\":[{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"magnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSlashableBips\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"slashableBips\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSlashedRate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalAndNonslashableUpdate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"totalAndNonslashableUpdate\",\"type\":\"tuple\",\"internalType\":\"structSlasher.TotalAndNonslashableUpdate\",\"components\":[{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"totalMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nonSlashableMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastSlashed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"queueAllocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allocationParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.MagnitudeAdjustmentParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSetMagnitudeParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.OperatorSetMagnitudeParam[]\",\"components\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"magnitudeDiff\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}]},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueDeallocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deallocationParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.MagnitudeAdjustmentParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSetMagnitudeParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.OperatorSetMagnitudeParam[]\",\"components\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"magnitudeDiff\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}]},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueMagnitudeConcentration\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonslashableDecremented\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"newNonslashableMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"newTotalMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueMagnitudeDilution\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonslashableAdded\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"newNonslashableMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"newTotalMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"shareScalingFactor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"shareScalingFactorAtEpoch\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"},{\"name\":\"bipsToSlash\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slashingEpochHistory\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashingUpdates\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"slashingRate\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"scalingFactor\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QueuedAllocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"slashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QueuedDeallocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"slashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalAndNonSlashableMagnitudeUpdated\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"nonSlashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"totalSlashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002f0638038062002f06833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051612e35620000d1600039600081816104a40152610fff0152600061034d0152612e356000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635c975abb116100f9578063a33820fc11610097578063e2dc83cc11610071578063e2dc83cc146104c6578063e49a1e84146104d9578063f2fde38b146104ec578063fabc1cbc146104ff57600080fd5b8063a33820fc14610421578063a3bf9e661461048c578063df5cf7231461049f57600080fd5b8063715018a6116100d3578063715018a61461044d578063886f1195146104555780638da5cb5b146104685780638f96d9c71461047957600080fd5b80635c975abb146104105780635f83102a1461042157806367e988de1461043a57600080fd5b8063364bce6f11610166578063595c6a6711610140578063595c6a67146103af5780635ab112d6146103b75780635ac86ab7146103ca5780635c120057146103fd57600080fd5b8063364bce6f146102fc57806339b70e38146103485780634279a7e61461038757600080fd5b8063136439dd116101a2578063136439dd1461027357806316449dae146102865780631c32f5c6146102c3578063334f00d6146102e957600080fd5b80630b1b781e146101c957806310c0a6061461023357806310d67a2f1461025e575b600080fd5b61020e6101d73660046124e3565b60976020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b90041682565b604080516001600160401b039384168152929091166020830152015b60405180910390f35b610246610241366004612546565b610512565b6040516001600160401b03909116815260200161022a565b61027161026c3660046125a1565b610579565b005b6102716102813660046125be565b610635565b61029961029436600461267f565b610774565b60408051825163ffffffff1681526020928301516001600160401b0316928101929092520161022a565b6102d66102d13660046126bf565b610971565b60405161ffff909116815260200161022a565b6102466102f73660046126fe565b6109d0565b61030f61030a3660046124e3565b610a20565b60408051825163ffffffff1681526020808401516001600160401b0390811691830191909152928201519092169082015260600161022a565b61036f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161022a565b61039a610395366004612737565b610c04565b60405163ffffffff909116815260200161022a565b610271610c5a565b61039a6103c53660046126fe565b610d21565b6103ed6103d8366004612778565b606654600160ff9092169190911b9081161490565b604051901515815260200161022a565b61027161040b36600461279b565b610dc6565b60665460405190815260200161022a565b61020e61042f36600461289b565b600080935093915050565b61036f6104483660046125a1565b610fdd565b610271611073565b60655461036f906001600160a01b031681565b6033546001600160a01b031661036f565b61039a6104873660046128fa565b611087565b61039a61049a3660046128fa565b61142a565b61036f7f000000000000000000000000000000000000000000000000000000000000000081565b6103ed6104d43660046129a6565b61173f565b6102466104e73660046124e3565b611894565b6102716104fa3660046125a1565b611908565b61027161050d3660046125be565b61197e565b600080600080610523888887611ada565b91509150801561056d576001600160a01b038089166000908152609760209081526040808320938b16835292815282822063ffffffff86168352905220546001600160401b031692505b50909695505050505050565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f091906129ee565b6001600160a01b0316336001600160a01b0316146106295760405162461bcd60e51b815260040161062090612a0b565b60405180910390fd5b61063281611ba5565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a19190612a55565b6106bd5760405162461bcd60e51b815260040161062090612a77565b606654818116146107365760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608401610620565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b604080518082018252600080825260208083018290526001600160a01b038881168352609a8252848320888216845282528483208751909116835281528382208682015163ffffffff16835290529190912054805b80156108f7576001600160a01b038088166000908152609a602090815260408083208a851684528252808320895190941683529281528282208882015163ffffffff9081168452915291902090851690610824600184612ad5565b8154811061083457610834612aec565b60009182526020909120015463ffffffff16116108e7576001600160a01b038088166000908152609a602090815260408083208a851684528252808320895190941683529281528282208882015163ffffffff168352905220610898600183612ad5565b815481106108a8576108a8612aec565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160401b03169181019190915292506108f7565b6108f081612b02565b90506107c9565b5060405162461bcd60e51b815260206004820152604260248201527f536c61736865722e6765744d61676e69747564655570646174653a206e6f206d60448201527f61676e69747564652075706461746520666f756e642061742074696d6573746160648201526106d760f41b608482015260a401610620565b60008061098085848642610774565b9050600061098f868542610a20565b905080602001516001600160401b031661271083602001516001600160401b03166109ba9190612b19565b6109c49190612b4e565b925050505b9392505050565b6001600160a01b0380831660009081526098602090815260408083209385168352929052908120546001600160401b031680610a1757670de0b6b3a7640000915050610a1a565b90505b92915050565b60408051606081018252600080825260208083018290528284018290526001600160a01b038781168352609b8252848320908716835290529190912054805b8015610b64576001600160a01b038087166000908152609b6020908152604080832093891683529290522063ffffffff851690610a9d600184612ad5565b81548110610aad57610aad612aec565b60009182526020909120015463ffffffff1611610b54576001600160a01b038087166000908152609b60209081526040808320938916835292905220610af4600183612ad5565b81548110610b0457610b04612aec565b600091825260209182902060408051606081018252919092015463ffffffff811682526001600160401b03600160201b8204811694830194909452600160601b9004909216908201529250610b64565b610b5d81612b02565b9050610a5f565b5060405162461bcd60e51b815260206004820152606260248201527f536c61736865722e676574546f74616c416e644e6f6e736c61736861626c655560448201527f70646174653a206e6f20746f74616c616e646e6f6e736c61736861626c65206d60648201527f61676e69747564652075706461746520666f756e642061742074696d6573746160848201526106d760f41b60a482015260c401610620565b60996020528260005260406000206020528160005260406000208181548110610c2c57600080fd5b906000526020600020906008918282040191900660040292509250509054906101000a900463ffffffff1681565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190612a55565b610ce25760405162461bcd60e51b815260040161062090612a77565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6001600160a01b03808316600090815260996020908152604080832093851683529290529081205480610d58576000915050610a1a565b6001600160a01b038085166000908152609960209081526040808320938716835292905220610d88600183612ad5565b81548110610d9857610d98612aec565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16915050610a1a565b8063ffffffff166000108015610de357506127108163ffffffff16105b610e485760405162461bcd60e51b815260206004820152603060248201527f536c61736865722e5f736c617368526571756573746564426970733a20696e7660448201526f0c2d8d2c840c4d2e0e6a8dea6d8c2e6d60831b6064820152608401610620565b6040805180820190915233815263ffffffff841660208201526000610e6b611c9c565b905060005b8451811015610fd4576000858281518110610e8d57610e8d612aec565b602002602001015190506000610ea4898684610971565b610eb89061ffff1663ffffffff8816612b62565b90506000610ec68a846109d0565b90506000610ed48284611cac565b6001600160a01b03808d1660008181526099602090815260408083209990941680835298815283822080546001810182559083528183206008820401805463ffffffff808f1660046007909516949094026101000a848102910219909116179055845180860186526001600160401b03998a168152958916868301818152858552609784528685208c865284528685209285529183528584209651875492518b16600160401b026fffffffffffffffffffffffffffffffff199093169a1699909917179094559081526098835281812096815295909152909320805467ffffffffffffffff191690921790915550610fcd905081612b91565b9050610e70565b50505050505050565b60405163c5e480db60e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c5e480db90602401606060405180830381865afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190612bac565b5192915050565b61107b611e01565b6110856000611e5b565b565b600061109285610fdd565b506110a0621baf8042612c1d565b905060005b838110156114215760008585838181106110c1576110c1612aec565b90506020028101906110d39190612c35565b6110e19060208101906125a1565b905060006110ef8883611ead565b8054909150600160601b90046001600160401b031660005b88888681811061111957611119612aec565b905060200281019061112b9190612c35565b611139906020810190612c55565b9050811015611397573689898781811061115557611155612aec565b90506020028101906111679190612c35565b611175906020810190612c55565b8381811061118557611185612aec565b905060600201600001905060008a8a888181106111a4576111a4612aec565b90506020028101906111b69190612c35565b6111c4906020810190612c55565b848181106111d4576111d4612aec565b90506060020160400160208101906111ec9190612ca4565b90506111f98c878461173f565b61125f5760405162461bcd60e51b815260206004820152603160248201527f536c61736865722e7175657565416c6c6f636174696f6e3a20746f6f206d616e604482015270792070656e64696e67207570646174657360781b6064820152608401610620565b836001600160401b0316816001600160401b031611156112f55760405162461bcd60e51b8152602060048201526044602482018190527f536c61736865722e7175657565416c6c6f636174696f6e3a206d61676e697475908201527f6465446966662065786365656473206e6f6e736c61736861626c654d61676e696064820152637475646560e01b608482015260a401610620565b60006113028d8885611fca565b8054909150600160201b90046001600160401b031661132e8e8986856113288887612cbf565b8f6121dd565b7fd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b3066498e89868d61135d8887612cbf565b60405161136e959493929190612cea565b60405180910390a16113808387612d52565b9550505050508061139090612b91565b9050611107565b5081546113bb908a9085908590600160201b90046001600160401b0316858a6122ff565b81546040517f8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f291611405918c9187918a918791600160201b9091046001600160401b031690612d7a565b60405180910390a15050508061141a90612b91565b90506110a5565b50949350505050565b600061143585610fdd565b50611443621baf8042612c1d565b905060005b8381101561142157600085858381811061146457611464612aec565b90506020028101906114769190612c35565b6114849060208101906125a1565b905060006114928883611ead565b8054909150600160601b90046001600160401b031660005b8888868181106114bc576114bc612aec565b90506020028101906114ce9190612c35565b6114dc906020810190612c55565b90508110156116b557368989878181106114f8576114f8612aec565b905060200281019061150a9190612c35565b611518906020810190612c55565b8381811061152857611528612aec565b905060600201600001905060008a8a8881811061154757611547612aec565b90506020028101906115599190612c35565b611567906020810190612c55565b8481811061157757611577612aec565b905060600201604001602081019061158f9190612ca4565b9050600061159e8d8885611fca565b80549091506001600160401b03600160201b909104811690831681101561163b5760405162461bcd60e51b8152602060048201526044602482018190527f536c61736865722e71756575654465616c6c6f636174696f6e3a206d61676e69908201527f7475646544696666206578636565647320616c6c6f6361746564206d61676e696064820152637475646560e01b608482015260a401610620565b61164c8e8986856113288887612d52565b7fd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c4138e89868d61167b8887612d52565b60405161168c959493929190612cea565b60405180910390a161169e8387612cbf565b955050505050806116ae90612b91565b90506114aa565b5081546116d9908a9085908590600160201b90046001600160401b0316858a6122ff565b81546040517f8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f291611723918c9187918a918791600160201b9091046001600160401b031690612d7a565b60405180910390a15050508061173890612b91565b9050611448565b6001600160a01b038084166000908152609a60209081526040808320938616835292815291812090918291908290611779908601866125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460200160208101906117ae9190612dbc565b63ffffffff168152602081019190915260400160002054905060038110156117da5760019150506109c9565b6001600160a01b038086166000908152609a6020908152604080832093881683529281529181204292909190611812908701876125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008560200160208101906118479190612dbc565b63ffffffff1681526020810191909152604001600020611868600384612ad5565b8154811061187857611878612aec565b60009182526020909120015463ffffffff161095945050505050565b6000670de0b6b3a764000081806118ac878787611ada565b9150915080156118fd576001600160a01b038781166000908152609760209081526040808320938a16835292815282822063ffffffff8616835290522054600160401b90046001600160401b031692505b509095945050505050565b611910611e01565b6001600160a01b0381166119755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610620565b61063281611e5b565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f591906129ee565b6001600160a01b0316336001600160a01b031614611a255760405162461bcd60e51b815260040161062090612a0b565b606654198119606654191614611aa35760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608401610620565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610769565b6001600160a01b0380841660009081526099602090815260408083209386168352929052908120548190819081905b8015611b98576001600160a01b038089166000908152609960209081526040808320938b16835292905220611b3f600183612ad5565b81548110611b4f57611b4f612aec565b6000918252602090912060088204015460079091166004026101000a900463ffffffff908116935086168311611b885760019150611b98565b611b9181612b02565b9050611b09565b5090969095509350505050565b6001600160a01b038116611c335760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a401610620565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ca742612414565b905090565b60006001600160401b038216611cfa5760405162461bcd60e51b815260206004820152601360248201527263616e6e6f7420736c61736820666f7220302560681b6044820152606401610620565b6305f5e1006001600160401b0383161115611d635760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f7420736c617368206d6f7265207468616e2031303025206174206f6044820152626e636560e81b6064820152608401610620565b60006001600160401b0383166305f5e1001480611dc057506001600160401b03808416908516611da7670de0b6b3a76400006bffffffffffffffffffffffff612b19565b611db390600019612b4e565b611dbd9190612b4e565b10155b15611dd357506001600160401b03610a17565b611de1836305f5e100612d52565b611def6305f5e10086612b62565b611df99190612dd9565b949350505050565b6033546001600160a01b031633146110855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610620565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038083166000908152609b6020908152604080832093851683529290529081205480611f77576001600160a01b038481166000908152609b60209081526040808320938716835292815282822083516060810185528381528083018481529481018481528254600181018455928552929093209251920180549351915163ffffffff9093166001600160601b031990941693909317600160201b6001600160401b03928316021767ffffffffffffffff60601b1916600160601b91909216021790555b6001600160a01b038085166000908152609b60209081526040808320938716835292905220611fa7600183612ad5565b81548110611fb757611fb7612aec565b9060005260206000200191505092915050565b6001600160a01b038084166000908152609a60209081526040808320938616835292815291812090918291908290612004908601866125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460200160208101906120399190612dbc565b63ffffffff16815260208101919091526040016000205490508061212f576001600160a01b038086166000908152609a6020908152604080832093881683529281529181209161208b908601866125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460200160208101906120c09190612dbc565b63ffffffff908116825260208083019390935260409182016000908120835180850190945281845283850182815281546001810183559183529490912092519201805493516001600160401b0316600160201b026001600160601b031990941692909116919091179190911790555b6001600160a01b038086166000908152609a60209081526040808320938816835292815291812091612163908601866125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460200160208101906121989190612dbc565b63ffffffff16815260208101919091526040016000206121b9600183612ad5565b815481106121c9576121c9612aec565b906000526020600020019150509392505050565b825463ffffffff828116911614156122185782546bffffffffffffffff000000001916600160201b6001600160401b038416021783556122f7565b6001600160a01b038087166000908152609a6020908152604080832093891683529281529181209161224c908701876125a1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008560200160208101906122819190612dbc565b63ffffffff908116825260208083019390935260409182016000908120835180850190945285831684526001600160401b038088168587019081528254600181018455928452959092209351930180549451909116600160201b026001600160601b031990941692909116919091179190911790555b505050505050565b835463ffffffff828116911614156123635783546001600160401b03838116600160601b0267ffffffffffffffff60601b19918616600160201b029190911673ffffffffffffffffffffffffffffffff0000000019909216919091171784556122f7565b6001600160a01b038087166000908152609b602090815260408083209389168352928152828220835160608101855263ffffffff80871682526001600160401b03808a168386019081528982169784019788528454600181018655948752949095209151919092018054935195518516600160601b0267ffffffffffffffff60601b1996909516600160201b026001600160601b031990941691909216179190911792909216179055505050505050565b6000635fc630408210156124905760405162461bcd60e51b815260206004820152603d60248201527f45706f63685574696c732e67657445706f636846726f6d54696d657374616d7060448201527f3a2074696d657374616d70206973206265666f72652067656e657369730000006064820152608401610620565b62093a806124a2635fc6304084612ad5565b610a1a9190612b4e565b6001600160a01b038116811461063257600080fd5b63ffffffff8116811461063257600080fd5b80356124de816124c1565b919050565b6000806000606084860312156124f857600080fd5b8335612503816124ac565b92506020840135612513816124ac565b91506040840135612523816124c1565b809150509250925092565b60006040828403121561254057600080fd5b50919050565b60008060008060a0858703121561255c57600080fd5b8435612567816124ac565b93506020850135612577816124ac565b9250612586866040870161252e565b91506080850135612596816124c1565b939692955090935050565b6000602082840312156125b357600080fd5b8135610a17816124ac565b6000602082840312156125d057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612615576126156125d7565b604052919050565b60006040828403121561262f57600080fd5b604051604081018181106001600160401b0382111715612651576126516125d7565b6040529050808235612662816124ac565b81526020830135612672816124c1565b6020919091015292915050565b60008060008060a0858703121561269557600080fd5b84356126a0816124ac565b935060208501356126b0816124ac565b9250612586866040870161261d565b6000806000608084860312156126d457600080fd5b83356126df816124ac565b92506126ee856020860161261d565b91506060840135612523816124ac565b6000806040838503121561271157600080fd5b823561271c816124ac565b9150602083013561272c816124ac565b809150509250929050565b60008060006060848603121561274c57600080fd5b8335612757816124ac565b92506020840135612767816124ac565b929592945050506040919091013590565b60006020828403121561278a57600080fd5b813560ff81168114610a1757600080fd5b600080600080608085870312156127b157600080fd5b84356127bc816124ac565b93506020858101356127cd816124c1565b935060408601356001600160401b03808211156127e957600080fd5b818801915088601f8301126127fd57600080fd5b81358181111561280f5761280f6125d7565b8060051b91506128208483016125ed565b818152918301840191848101908b84111561283a57600080fd5b938501935b838510156128645784359250612854836124ac565b828252938501939085019061283f565b809750505050505050612879606086016124d3565b905092959194509250565b80356001600160401b03811681146124de57600080fd5b6000806000606084860312156128b057600080fd5b83356128bb816124ac565b92506128c960208501612884565b915060408401356001600160401b038111156128e457600080fd5b6128f08682870161252e565b9150509250925092565b6000806000806060858703121561291057600080fd5b843561291b816124ac565b935060208501356001600160401b038082111561293757600080fd5b818701915087601f83011261294b57600080fd5b81358181111561295a57600080fd5b8860208260051b850101111561296f57600080fd5b60208301955080945050604087013591508082111561298d57600080fd5b5061299a8782880161252e565b91505092959194509250565b6000806000608084860312156129bb57600080fd5b83356129c6816124ac565b925060208401356129d6816124ac565b91506129e5856040860161252e565b90509250925092565b600060208284031215612a0057600080fd5b8151610a17816124ac565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b600060208284031215612a6757600080fd5b81518015158114610a1757600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612ae757612ae7612abf565b500390565b634e487b7160e01b600052603260045260246000fd5b600081612b1157612b11612abf565b506000190190565b6000816000190483118215151615612b3357612b33612abf565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612b5d57612b5d612b38565b500490565b60006001600160401b0380831681851681830481118215151615612b8857612b88612abf565b02949350505050565b6000600019821415612ba557612ba5612abf565b5060010190565b600060608284031215612bbe57600080fd5b604051606081018181106001600160401b0382111715612be057612be06125d7565b6040528251612bee816124ac565b81526020830151612bfe816124ac565b60208201526040830151612c11816124c1565b60408201529392505050565b60008219821115612c3057612c30612abf565b500190565b60008235603e19833603018112612c4b57600080fd5b9190910192915050565b6000808335601e19843603018112612c6c57600080fd5b8301803591506001600160401b03821115612c8657600080fd5b6020019150606081023603821315612c9d57600080fd5b9250929050565b600060208284031215612cb657600080fd5b6109c982612884565b60006001600160401b03808316818516808303821115612ce157612ce1612abf565b01949350505050565b6001600160a01b038681168252858116602083015260c08201908535612d0f816124ac565b1660408301526020850135612d23816124c1565b63ffffffff90811660608401529390931660808201526001600160401b039190911660a0909101529392505050565b60006001600160401b0383811690831681811015612d7257612d72612abf565b039392505050565b6001600160a01b03958616815293909416602084015263ffffffff9190911660408301526001600160401b039081166060830152909116608082015260a00190565b600060208284031215612dce57600080fd5b8135610a17816124c1565b60006001600160401b0380841680612df357612df3612b38565b9216919091049291505056fea26469706673582212206c38e25403d3181155f7725d4ab77f14e7d5e26c93f3c1caad582a17fd7692e064736f6c634300080c0033",
}

// SlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use SlasherMetaData.ABI instead.
var SlasherABI = SlasherMetaData.ABI

// SlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlasherMetaData.Bin instead.
var SlasherBin = SlasherMetaData.Bin

// DeploySlasher deploys a new Ethereum contract, binding an instance of Slasher to it.
func DeploySlasher(auth *bind.TransactOpts, backend bind.ContractBackend, _strategyManager common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *Slasher, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlasherBin), backend, _strategyManager, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// Slasher is an auto generated Go binding around an Ethereum contract.
type Slasher struct {
	SlasherCaller     // Read-only binding to the contract
	SlasherTransactor // Write-only binding to the contract
	SlasherFilterer   // Log filterer for contract events
}

// SlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlasherSession struct {
	Contract     *Slasher          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlasherCallerSession struct {
	Contract *SlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlasherTransactorSession struct {
	Contract     *SlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlasherRaw struct {
	Contract *Slasher // Generic contract binding to access the raw methods on
}

// SlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlasherCallerRaw struct {
	Contract *SlasherCaller // Generic read-only contract binding to access the raw methods on
}

// SlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlasherTransactorRaw struct {
	Contract *SlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlasher creates a new instance of Slasher, bound to a specific deployed contract.
func NewSlasher(address common.Address, backend bind.ContractBackend) (*Slasher, error) {
	contract, err := bindSlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// NewSlasherCaller creates a new read-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherCaller(address common.Address, caller bind.ContractCaller) (*SlasherCaller, error) {
	contract, err := bindSlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherCaller{contract: contract}, nil
}

// NewSlasherTransactor creates a new write-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*SlasherTransactor, error) {
	contract, err := bindSlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherTransactor{contract: contract}, nil
}

// NewSlasherFilterer creates a new log filterer instance of Slasher, bound to a specific deployed contract.
func NewSlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*SlasherFilterer, error) {
	contract, err := bindSlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlasherFilterer{contract: contract}, nil
}

// bindSlasher binds a generic wrapper to an already deployed contract.
func bindSlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.SlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transact(opts, method, params...)
}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0xe2dc83cc.
//
// Solidity: function checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns(bool)
func (_Slasher *SlasherCaller) CheckPendingUpdates(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) (bool, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "checkPendingUpdates", operator, strategy, operatorSet)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0xe2dc83cc.
//
// Solidity: function checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns(bool)
func (_Slasher *SlasherSession) CheckPendingUpdates(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) (bool, error) {
	return _Slasher.Contract.CheckPendingUpdates(&_Slasher.CallOpts, operator, strategy, operatorSet)
}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0xe2dc83cc.
//
// Solidity: function checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns(bool)
func (_Slasher *SlasherCallerSession) CheckPendingUpdates(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) (bool, error) {
	return _Slasher.Contract.CheckPendingUpdates(&_Slasher.CallOpts, operator, strategy, operatorSet)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCallerSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherCaller) GetAllocatorFor(opts *bind.CallOpts, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getAllocatorFor", operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherSession) GetAllocatorFor(operator common.Address) (common.Address, error) {
	return _Slasher.Contract.GetAllocatorFor(&_Slasher.CallOpts, operator)
}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherCallerSession) GetAllocatorFor(operator common.Address) (common.Address, error) {
	return _Slasher.Contract.GetAllocatorFor(&_Slasher.CallOpts, operator)
}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherCaller) GetMagnitudeUpdate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getMagnitudeUpdate", operator, strategy, operatorSet, timestamp)

	if err != nil {
		return *new(SlasherMagnitudeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(SlasherMagnitudeUpdate)).(*SlasherMagnitudeUpdate)

	return out0, err

}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherSession) GetMagnitudeUpdate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	return _Slasher.Contract.GetMagnitudeUpdate(&_Slasher.CallOpts, operator, strategy, operatorSet, timestamp)
}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherCallerSession) GetMagnitudeUpdate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	return _Slasher.Contract.GetMagnitudeUpdate(&_Slasher.CallOpts, operator, strategy, operatorSet, timestamp)
}

// GetSlashableBips is a free data retrieval call binding the contract method 0x1c32f5c6.
//
// Solidity: function getSlashableBips(address operator, (address,uint32) operatorSet, address strategy) view returns(uint16 slashableBips)
func (_Slasher *SlasherCaller) GetSlashableBips(opts *bind.CallOpts, operator common.Address, operatorSet ISlasherOperatorSet, strategy common.Address) (uint16, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getSlashableBips", operator, operatorSet, strategy)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetSlashableBips is a free data retrieval call binding the contract method 0x1c32f5c6.
//
// Solidity: function getSlashableBips(address operator, (address,uint32) operatorSet, address strategy) view returns(uint16 slashableBips)
func (_Slasher *SlasherSession) GetSlashableBips(operator common.Address, operatorSet ISlasherOperatorSet, strategy common.Address) (uint16, error) {
	return _Slasher.Contract.GetSlashableBips(&_Slasher.CallOpts, operator, operatorSet, strategy)
}

// GetSlashableBips is a free data retrieval call binding the contract method 0x1c32f5c6.
//
// Solidity: function getSlashableBips(address operator, (address,uint32) operatorSet, address strategy) view returns(uint16 slashableBips)
func (_Slasher *SlasherCallerSession) GetSlashableBips(operator common.Address, operatorSet ISlasherOperatorSet, strategy common.Address) (uint16, error) {
	return _Slasher.Contract.GetSlashableBips(&_Slasher.CallOpts, operator, operatorSet, strategy)
}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCaller) GetSlashedRate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getSlashedRate", operator, strategy, operatorSet, epoch)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherSession) GetSlashedRate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	return _Slasher.Contract.GetSlashedRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCallerSession) GetSlashedRate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	return _Slasher.Contract.GetSlashedRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetTotalAndNonslashableUpdate is a free data retrieval call binding the contract method 0x364bce6f.
//
// Solidity: function getTotalAndNonslashableUpdate(address operator, address strategy, uint32 timestamp) view returns((uint32,uint64,uint64) totalAndNonslashableUpdate)
func (_Slasher *SlasherCaller) GetTotalAndNonslashableUpdate(opts *bind.CallOpts, operator common.Address, strategy common.Address, timestamp uint32) (SlasherTotalAndNonslashableUpdate, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getTotalAndNonslashableUpdate", operator, strategy, timestamp)

	if err != nil {
		return *new(SlasherTotalAndNonslashableUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(SlasherTotalAndNonslashableUpdate)).(*SlasherTotalAndNonslashableUpdate)

	return out0, err

}

// GetTotalAndNonslashableUpdate is a free data retrieval call binding the contract method 0x364bce6f.
//
// Solidity: function getTotalAndNonslashableUpdate(address operator, address strategy, uint32 timestamp) view returns((uint32,uint64,uint64) totalAndNonslashableUpdate)
func (_Slasher *SlasherSession) GetTotalAndNonslashableUpdate(operator common.Address, strategy common.Address, timestamp uint32) (SlasherTotalAndNonslashableUpdate, error) {
	return _Slasher.Contract.GetTotalAndNonslashableUpdate(&_Slasher.CallOpts, operator, strategy, timestamp)
}

// GetTotalAndNonslashableUpdate is a free data retrieval call binding the contract method 0x364bce6f.
//
// Solidity: function getTotalAndNonslashableUpdate(address operator, address strategy, uint32 timestamp) view returns((uint32,uint64,uint64) totalAndNonslashableUpdate)
func (_Slasher *SlasherCallerSession) GetTotalAndNonslashableUpdate(operator common.Address, strategy common.Address, timestamp uint32) (SlasherTotalAndNonslashableUpdate, error) {
	return _Slasher.Contract.GetTotalAndNonslashableUpdate(&_Slasher.CallOpts, operator, strategy, timestamp)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCaller) LastSlashed(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "lastSlashed", operator, strategy)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCallerSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCallerSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCallerSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCallerSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCallerSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactor(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactor", operator, strategy)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactorAtEpoch(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactorAtEpoch", operator, strategy, epoch)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCaller) SlashingEpochHistory(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingEpochHistory", arg0, arg1, arg2)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherSession) SlashingEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashingEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCallerSession) SlashingEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashingEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCaller) SlashingUpdates(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingUpdates", arg0, arg1, arg2)

	outstruct := new(struct {
		SlashingRate  uint64
		ScalingFactor uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SlashingRate = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.ScalingFactor = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherSession) SlashingUpdates(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingUpdates(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCallerSession) SlashingUpdates(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingUpdates(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCallerSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactorSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactor) QueueAllocation(opts *bind.TransactOpts, operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueAllocation", operator, allocationParams, allocatorSignature)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherSession) QueueAllocation(operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueAllocation(&_Slasher.TransactOpts, operator, allocationParams, allocatorSignature)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactorSession) QueueAllocation(operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueAllocation(&_Slasher.TransactOpts, operator, allocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactor) QueueDeallocation(opts *bind.TransactOpts, operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueDeallocation", operator, deallocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherSession) QueueDeallocation(operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueDeallocation(&_Slasher.TransactOpts, operator, deallocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactorSession) QueueDeallocation(operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueDeallocation(&_Slasher.TransactOpts, operator, deallocationParams, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactor) QueueMagnitudeConcentration(opts *bind.TransactOpts, operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueMagnitudeConcentration", operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherSession) QueueMagnitudeConcentration(operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeConcentration(&_Slasher.TransactOpts, operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactorSession) QueueMagnitudeConcentration(operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeConcentration(&_Slasher.TransactOpts, operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactor) QueueMagnitudeDilution(opts *bind.TransactOpts, operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueMagnitudeDilution", operator, nonslashableAdded, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherSession) QueueMagnitudeDilution(operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeDilution(&_Slasher.TransactOpts, operator, nonslashableAdded, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactorSession) QueueMagnitudeDilution(operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeDilution(&_Slasher.TransactOpts, operator, nonslashableAdded, allocatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherTransactor) SlashOperator(opts *bind.TransactOpts, operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "slashOperator", operator, operatorSetId, strategies, bipsToSlash)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherSession) SlashOperator(operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.Contract.SlashOperator(&_Slasher.TransactOpts, operator, operatorSetId, strategies, bipsToSlash)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherTransactorSession) SlashOperator(operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.Contract.SlashOperator(&_Slasher.TransactOpts, operator, operatorSetId, strategies, bipsToSlash)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// SlasherInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Slasher contract.
type SlasherInitializedIterator struct {
	Event *SlasherInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherInitialized represents a Initialized event raised by the Slasher contract.
type SlasherInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) FilterInitialized(opts *bind.FilterOpts) (*SlasherInitializedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SlasherInitializedIterator{contract: _Slasher.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SlasherInitialized) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherInitialized)
				if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) ParseInitialized(log types.Log) (*SlasherInitialized, error) {
	event := new(SlasherInitialized)
	if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Slasher contract.
type SlasherOwnershipTransferredIterator struct {
	Event *SlasherOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherOwnershipTransferred represents a OwnershipTransferred event raised by the Slasher contract.
type SlasherOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SlasherOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SlasherOwnershipTransferredIterator{contract: _Slasher.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SlasherOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherOwnershipTransferred)
				if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) ParseOwnershipTransferred(log types.Log) (*SlasherOwnershipTransferred, error) {
	event := new(SlasherOwnershipTransferred)
	if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Slasher contract.
type SlasherPausedIterator struct {
	Event *SlasherPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPaused represents a Paused event raised by the Slasher contract.
type SlasherPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*SlasherPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherPausedIterator{contract: _Slasher.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SlasherPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPaused)
				if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParsePaused(log types.Log) (*SlasherPaused, error) {
	event := new(SlasherPaused)
	if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the Slasher contract.
type SlasherPauserRegistrySetIterator struct {
	Event *SlasherPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPauserRegistrySet represents a PauserRegistrySet event raised by the Slasher contract.
type SlasherPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*SlasherPauserRegistrySetIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &SlasherPauserRegistrySetIterator{contract: _Slasher.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *SlasherPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPauserRegistrySet)
				if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) ParsePauserRegistrySet(log types.Log) (*SlasherPauserRegistrySet, error) {
	event := new(SlasherPauserRegistrySet)
	if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherQueuedAllocationIterator is returned from FilterQueuedAllocation and is used to iterate over the raw logs and unpacked data for QueuedAllocation events raised by the Slasher contract.
type SlasherQueuedAllocationIterator struct {
	Event *SlasherQueuedAllocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherQueuedAllocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherQueuedAllocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherQueuedAllocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherQueuedAllocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherQueuedAllocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherQueuedAllocation represents a QueuedAllocation event raised by the Slasher contract.
type SlasherQueuedAllocation struct {
	Operator           common.Address
	Strategy           common.Address
	OperatorSet        ISlasherOperatorSet
	EffectTimestamp    uint32
	SlashableMagnitude uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterQueuedAllocation is a free log retrieval operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) FilterQueuedAllocation(opts *bind.FilterOpts) (*SlasherQueuedAllocationIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "QueuedAllocation")
	if err != nil {
		return nil, err
	}
	return &SlasherQueuedAllocationIterator{contract: _Slasher.contract, event: "QueuedAllocation", logs: logs, sub: sub}, nil
}

// WatchQueuedAllocation is a free log subscription operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) WatchQueuedAllocation(opts *bind.WatchOpts, sink chan<- *SlasherQueuedAllocation) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "QueuedAllocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherQueuedAllocation)
				if err := _Slasher.contract.UnpackLog(event, "QueuedAllocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQueuedAllocation is a log parse operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) ParseQueuedAllocation(log types.Log) (*SlasherQueuedAllocation, error) {
	event := new(SlasherQueuedAllocation)
	if err := _Slasher.contract.UnpackLog(event, "QueuedAllocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherQueuedDeallocationIterator is returned from FilterQueuedDeallocation and is used to iterate over the raw logs and unpacked data for QueuedDeallocation events raised by the Slasher contract.
type SlasherQueuedDeallocationIterator struct {
	Event *SlasherQueuedDeallocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherQueuedDeallocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherQueuedDeallocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherQueuedDeallocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherQueuedDeallocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherQueuedDeallocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherQueuedDeallocation represents a QueuedDeallocation event raised by the Slasher contract.
type SlasherQueuedDeallocation struct {
	Operator           common.Address
	Strategy           common.Address
	OperatorSet        ISlasherOperatorSet
	EffectTimestamp    uint32
	SlashableMagnitude uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterQueuedDeallocation is a free log retrieval operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) FilterQueuedDeallocation(opts *bind.FilterOpts) (*SlasherQueuedDeallocationIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "QueuedDeallocation")
	if err != nil {
		return nil, err
	}
	return &SlasherQueuedDeallocationIterator{contract: _Slasher.contract, event: "QueuedDeallocation", logs: logs, sub: sub}, nil
}

// WatchQueuedDeallocation is a free log subscription operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) WatchQueuedDeallocation(opts *bind.WatchOpts, sink chan<- *SlasherQueuedDeallocation) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "QueuedDeallocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherQueuedDeallocation)
				if err := _Slasher.contract.UnpackLog(event, "QueuedDeallocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQueuedDeallocation is a log parse operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) ParseQueuedDeallocation(log types.Log) (*SlasherQueuedDeallocation, error) {
	event := new(SlasherQueuedDeallocation)
	if err := _Slasher.contract.UnpackLog(event, "QueuedDeallocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherTotalAndNonSlashableMagnitudeUpdatedIterator is returned from FilterTotalAndNonSlashableMagnitudeUpdated and is used to iterate over the raw logs and unpacked data for TotalAndNonSlashableMagnitudeUpdated events raised by the Slasher contract.
type SlasherTotalAndNonSlashableMagnitudeUpdatedIterator struct {
	Event *SlasherTotalAndNonSlashableMagnitudeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherTotalAndNonSlashableMagnitudeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherTotalAndNonSlashableMagnitudeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherTotalAndNonSlashableMagnitudeUpdated represents a TotalAndNonSlashableMagnitudeUpdated event raised by the Slasher contract.
type SlasherTotalAndNonSlashableMagnitudeUpdated struct {
	Operator                common.Address
	Strategy                common.Address
	EffectTimestamp         uint32
	NonSlashableMagnitude   uint64
	TotalSlashableMagnitude uint64
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterTotalAndNonSlashableMagnitudeUpdated is a free log retrieval operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) FilterTotalAndNonSlashableMagnitudeUpdated(opts *bind.FilterOpts) (*SlasherTotalAndNonSlashableMagnitudeUpdatedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "TotalAndNonSlashableMagnitudeUpdated")
	if err != nil {
		return nil, err
	}
	return &SlasherTotalAndNonSlashableMagnitudeUpdatedIterator{contract: _Slasher.contract, event: "TotalAndNonSlashableMagnitudeUpdated", logs: logs, sub: sub}, nil
}

// WatchTotalAndNonSlashableMagnitudeUpdated is a free log subscription operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) WatchTotalAndNonSlashableMagnitudeUpdated(opts *bind.WatchOpts, sink chan<- *SlasherTotalAndNonSlashableMagnitudeUpdated) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "TotalAndNonSlashableMagnitudeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherTotalAndNonSlashableMagnitudeUpdated)
				if err := _Slasher.contract.UnpackLog(event, "TotalAndNonSlashableMagnitudeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalAndNonSlashableMagnitudeUpdated is a log parse operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) ParseTotalAndNonSlashableMagnitudeUpdated(log types.Log) (*SlasherTotalAndNonSlashableMagnitudeUpdated, error) {
	event := new(SlasherTotalAndNonSlashableMagnitudeUpdated)
	if err := _Slasher.contract.UnpackLog(event, "TotalAndNonSlashableMagnitudeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Slasher contract.
type SlasherUnpausedIterator struct {
	Event *SlasherUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherUnpaused represents a Unpaused event raised by the Slasher contract.
type SlasherUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*SlasherUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherUnpausedIterator{contract: _Slasher.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SlasherUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherUnpaused)
				if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParseUnpaused(log types.Log) (*SlasherUnpaused, error) {
	event := new(SlasherUnpaused)
	if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
