// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Slasher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISignatureUtilsSignatureWithExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithExpiry struct {
	Signature []byte
	Expiry    *big.Int
}

// ISlasherOperatorSet is an auto generated low-level Go binding around an user-defined struct.
type ISlasherOperatorSet struct {
	Avs common.Address
	Id  uint32
}

// SlasherMagnitudeAdjustmentParam is an auto generated low-level Go binding around an user-defined struct.
type SlasherMagnitudeAdjustmentParam struct {
	Strategy                   common.Address
	OperatorSetMagnitudeParams []SlasherOperatorSetMagnitudeParam
}

// SlasherMagnitudeUpdate is an auto generated low-level Go binding around an user-defined struct.
type SlasherMagnitudeUpdate struct {
	Timestamp uint32
	Magnitude uint64
}

// SlasherOperatorSetMagnitudeParam is an auto generated low-level Go binding around an user-defined struct.
type SlasherOperatorSetMagnitudeParam struct {
	OperatorSet   ISlasherOperatorSet
	MagnitudeDiff uint64
}

// SlasherMetaData contains all meta data concerning the Slasher contract.
var SlasherMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_strategyManager\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"_checkPendingUpdates\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allocatorFor\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAllocatorFor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMagnitudeUpdate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"magnitudeUpdate\",\"type\":\"tuple\",\"internalType\":\"structSlasher.MagnitudeUpdate\",\"components\":[{\"name\":\"timestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"magnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSlashedRate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastSlashed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"queueAllocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allocationParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.MagnitudeAdjustmentParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSetMagnitudeParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.OperatorSetMagnitudeParam[]\",\"components\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"magnitudeDiff\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}]},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueDeallocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deallocationParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.MagnitudeAdjustmentParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSetMagnitudeParams\",\"type\":\"tuple[]\",\"internalType\":\"structSlasher.OperatorSetMagnitudeParam[]\",\"components\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"magnitudeDiff\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}]},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueMagnitudeConcentration\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonslashableDecremented\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"newNonslashableMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"newTotalMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"queueMagnitudeDilution\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonslashableAdded\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"allocatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"newNonslashableMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"newTotalMagnitude\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"shareScalingFactor\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"shareScalingFactorAtEpoch\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"epoch\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"},{\"name\":\"bipsToSlash\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slashingEpochHistory\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"slashingUpdates\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"slashingRate\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"scalingFactor\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QueuedAllocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"slashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QueuedDeallocation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structISlasher.OperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"slashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalAndNonSlashableMagnitudeUpdated\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"effectTimestamp\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"nonSlashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"totalSlashableMagnitude\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620027a4380380620027a4833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516126da620000ca600039600061046c015260006102c001526126da6000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80635c975abb116100f957806392d4fb9911610097578063df5cf72311610071578063df5cf72314610467578063e49a1e841461048e578063f2fde38b146104a1578063fabc1cbc146104b457600080fd5b806392d4fb9914610441578063a33820fc146103bd578063a3bf9e661461045457600080fd5b8063715018a6116100d3578063715018a614610402578063886f11951461040a5780638da5cb5b1461041d5780638f96d9c71461042e57600080fd5b80635c975abb146103ac5780635f83102a146103bd57806367e988de146103d657600080fd5b806339b70e3811610166578063595c6a6711610140578063595c6a671461034b5780635ab112d6146103535780635ac86ab7146103665780635c1200571461039957600080fd5b806339b70e38146102bb5780634279a7e6146102fa57806353fb2adf1461032257600080fd5b80630b1b781e146101ae57806310c0a6061461021857806310d67a2f14610243578063136439dd1461025857806316449dae1461026b578063334f00d6146102a8575b600080fd5b6101f36101bc366004611fb8565b60976020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b90041682565b604080516001600160401b039384168152929091166020830152015b60405180910390f35b61022b610226366004612017565b6104c7565b6040516001600160401b03909116815260200161020f565b610256610251366004612070565b61052e565b005b61025661026636600461208d565b6105ea565b61027e610279366004612017565b610729565b60408051825163ffffffff1681526020928301516001600160401b0316928101929092520161020f565b61022b6102b63660046120a6565b610970565b6102e27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020f565b61030d6103083660046120df565b6109c0565b60405163ffffffff909116815260200161020f565b6102e2610330366004612070565b609c602052600090815260409020546001600160a01b031681565b610256610a16565b61030d6103613660046120a6565b610add565b610389610374366004612120565b606654600160ff9092169190911b9081161490565b604051901515815260200161020f565b6102566103a7366004612159565b610b82565b60665460405190815260200161020f565b6101f36103cb36600461225f565b600080935093915050565b6102e26103e4366004612070565b6001600160a01b039081166000908152609c60205260409020541690565b610256610d77565b6065546102e2906001600160a01b031681565b6033546001600160a01b03166102e2565b61030d61043c3660046122be565b610d8b565b61025661044f36600461236a565b611058565b61030d6104623660046122be565b61125c565b6102e27f000000000000000000000000000000000000000000000000000000000000000081565b61022b61049c366004611fb8565b611501565b6102566104af366004612070565b611575565b6102566104c236600461208d565b6115eb565b6000806000806104d8888887611747565b915091508015610522576001600160a01b038089166000908152609760209081526040808320938b16835292815282822063ffffffff86168352905220546001600160401b031692505b50909695505050505050565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a591906123a9565b6001600160a01b0316336001600160a01b0316146105de5760405162461bcd60e51b81526004016105d5906123c6565b60405180910390fd5b6105e781611812565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190612410565b6106725760405162461bcd60e51b81526004016105d590612432565b606654818116146106eb5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016105d5565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b604080518082018252600080825260208083018290526001600160a01b038881168352609a8252848320908816835281529281209192909190829061077090870187612070565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008560200160208101906107a5919061247a565b63ffffffff168152602081019190915260400160009081205491506107cb6001836124b2565b90505b6001600160a01b038088166000908152609a60209081526040808320938a16835292815291812063ffffffff87169290919061080c90890189612070565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876020016020810190610841919061247a565b63ffffffff1663ffffffff168152602001908152602001600020828154811061086c5761086c6124c9565b60009182526020909120015463ffffffff1611610956576001600160a01b038088166000908152609a60209081526040808320938a168352928152918120916108b790880188612070565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008660200160208101906108ec919061247a565b63ffffffff1663ffffffff1681526020019081526020016000208181548110610917576109176124c9565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160401b0316918101919091529250610966565b61095f816124df565b90506107ce565b5050949350505050565b6001600160a01b0380831660009081526098602090815260408083209385168352929052908120546001600160401b0316806109b757670de0b6b3a76400009150506109ba565b90505b92915050565b609960205282600052604060002060205281600052604060002081815481106109e857600080fd5b906000526020600020906008918282040191900660040292509250509054906101000a900463ffffffff1681565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a829190612410565b610a9e5760405162461bcd60e51b81526004016105d590612432565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6001600160a01b03808316600090815260996020908152604080832093851683529290529081205480610b145760009150506109ba565b6001600160a01b038085166000908152609960209081526040808320938716835292905220610b446001836124b2565b81548110610b5457610b546124c9565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169150506109ba565b8063ffffffff166000108015610b9f57506127108163ffffffff16105b610c045760405162461bcd60e51b815260206004820152603060248201527f536c61736865722e5f736c617368526571756573746564426970733a20696e7660448201526f0c2d8d2c840c4d2e0e6a8dea6d8c2e6d60831b60648201526084016105d5565b6040805180820190915233815263ffffffff841660208201526000610c27611909565b905060005b8451811015610d6e576000858281518110610c4957610c496124c9565b60200260200101519050600080610c608a84610970565b90506000610c6e8284611919565b6001600160a01b03808d1660008181526099602090815260408083209990941680835298815283822080546001810182559083528183206008820401805463ffffffff808f1660046007909516949094026101000a848102910219909116179055845180860186526001600160401b03998a168152958916868301818152858552609784528685208c865284528685209285529183528584209651875492518b16600160401b026fffffffffffffffffffffffffffffffff199093169a1699909917179094559081526098835281812096815295909152909320805467ffffffffffffffff191690921790915550610d679050816124f6565b9050610c2c565b50505050505050565b610d7f611a6e565b610d896000611ac8565b565b6000336001600160a01b03861614801590610dc057506001600160a01b038581166000908152609c6020526040902054163314155b50610dce621baf8042612511565b905060005b8381101561104f576000858583818110610def57610def6124c9565b9050602002810190610e019190612529565b610e0f906020810190612070565b90506000610e1d8883611b1a565b8054909150600160601b90046001600160401b031660005b888886818110610e4757610e476124c9565b9050602002810190610e599190612529565b610e67906020810190612549565b90508110156110175736898987818110610e8357610e836124c9565b9050602002810190610e959190612529565b610ea3906020810190612549565b83818110610eb357610eb36124c9565b905060600201600001905060008a8a88818110610ed257610ed26124c9565b9050602002810190610ee49190612529565b610ef2906020810190612549565b84818110610f0257610f026124c9565b9050606002016040016020810190610f1a9190612598565b9050610f278c8784611058565b836001600160401b0316816001600160401b03161115610fbd5760405162461bcd60e51b8152602060048201526044602482018190527f536c61736865722e7175657565416c6c6f636174696f6e3a206d61676e697475908201527f6465446966662065786365656473206e6f6e736c61736861626c654d61676e696064820152637475646560e01b608482015260a4016105d5565b6000610fca8d8885611b72565b8054909150600160201b90046001600160401b0316610ff68e898685610ff088876125b3565b8f611ca6565b61100083876125de565b95505050505080611010906124f6565b9050610e35565b50815461103b908a9085908590600160201b90046001600160401b0316858a611dcd565b50505080611048906124f6565b9050610dd3565b50949350505050565b6001600160a01b038084166000908152609a6020908152604080832093861683529281529181209091829061108f90850185612070565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360200160208101906110c4919061247a565b63ffffffff1681526020810191909152604001600020549050806110e85750505050565b60006110f56001836124b2565b90505b6001600160a01b038086166000908152609a602090815260408083209388168352928152918120429290919061113090870187612070565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856020016020810190611165919061247a565b63ffffffff1663ffffffff1681526020019081526020016000208281548110611190576111906124c9565b60009182526020909120015463ffffffff16116111ac57611255565b6003816111ba6001856124b2565b6111c491906124b2565b106112455760405162461bcd60e51b815260206004820152604560248201527f536c61736865722e5f636865636b50656e64696e67557064617465733a20636160448201527f6e6e6f742068617665206d6f7265207468616e20332070656e64696e67207570606482015264646174657360d81b608482015260a4016105d5565b61124e816124df565b90506110f8565b5050505050565b6000336001600160a01b0386161480159061129157506001600160a01b038581166000908152609c6020526040902054163314155b5061129f621baf8042612511565b905060005b8381101561104f5760008585838181106112c0576112c06124c9565b90506020028101906112d29190612529565b6112e0906020810190612070565b905060006112ee8883611b1a565b8054909150600160601b90046001600160401b031660005b888886818110611318576113186124c9565b905060200281019061132a9190612529565b611338906020810190612549565b90508110156114c95736898987818110611354576113546124c9565b90506020028101906113669190612529565b611374906020810190612549565b83818110611384576113846124c9565b905060600201600001905060008a8a888181106113a3576113a36124c9565b90506020028101906113b59190612529565b6113c3906020810190612549565b848181106113d3576113d36124c9565b90506060020160400160208101906113eb9190612598565b905060006113fa8d8885611b72565b80549091506001600160401b03600160201b90910481169083168110156114975760405162461bcd60e51b8152602060048201526044602482018190527f536c61736865722e71756575654465616c6c6f636174696f6e3a206d61676e69908201527f7475646544696666206578636565647320616c6c6f6361746564206d61676e696064820152637475646560e01b608482015260a4016105d5565b6114a88e898685610ff088876125de565b6114b283876125b3565b955050505050806114c2906124f6565b9050611306565b5081546114ed908a9085908590600160201b90046001600160401b0316858a611dcd565b505050806114fa906124f6565b90506112a4565b6000670de0b6b3a76400008180611519878787611747565b91509150801561156a576001600160a01b038781166000908152609760209081526040808320938a16835292815282822063ffffffff8616835290522054600160401b90046001600160401b031692505b509095945050505050565b61157d611a6e565b6001600160a01b0381166115e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d5565b6105e781611ac8565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166291906123a9565b6001600160a01b0316336001600160a01b0316146116925760405162461bcd60e51b81526004016105d5906123c6565b6066541981196066541916146117105760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016105d5565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c9060200161071e565b6001600160a01b0380841660009081526099602090815260408083209386168352929052908120548190819081905b8015611805576001600160a01b038089166000908152609960209081526040808320938b168352929052206117ac6001836124b2565b815481106117bc576117bc6124c9565b6000918252602090912060088204015460079091166004026101000a900463ffffffff9081169350861683116117f55760019150611805565b6117fe816124df565b9050611776565b5090969095509350505050565b6001600160a01b0381166118a05760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016105d5565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b600061191442611ee7565b905090565b60006001600160401b0382166119675760405162461bcd60e51b815260206004820152601360248201527263616e6e6f7420736c61736820666f7220302560681b60448201526064016105d5565b6305f5e1006001600160401b03831611156119d05760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f7420736c617368206d6f7265207468616e2031303025206174206f6044820152626e636560e81b60648201526084016105d5565b60006001600160401b0383166305f5e1001480611a2d57506001600160401b03808416908516611a14670de0b6b3a76400006bffffffffffffffffffffffff612606565b611a209060001961263b565b611a2a919061263b565b10155b15611a4057506001600160401b036109b7565b611a4e836305f5e1006125de565b611a5c6305f5e1008661264f565b611a66919061267e565b949350505050565b6033546001600160a01b03163314610d895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038281166000908152609b602090815260408083209385168352929052908120805490611b4f6001836124b2565b81548110611b5f57611b5f6124c9565b9060005260206000200191505092915050565b6001600160a01b038084166000908152609a60209081526040808320938616835292815291812090918291908290611bac90860186612070565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020016020810190611be1919061247a565b63ffffffff16815260208082019290925260409081016000908120546001600160a01b03808a168352609a8552838320908916835284529181209193509091611c2c90860186612070565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020016020810190611c61919061247a565b63ffffffff1681526020810191909152604001600020611c826001836124b2565b81548110611c9257611c926124c9565b906000526020600020019150509392505050565b825463ffffffff82811691161415611ce15782546bffffffffffffffff000000001916600160201b6001600160401b03841602178355611dc5565b6001600160a01b038087166000908152609a60209081526040808320938916835292815291812091611d1590870187612070565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856020016020810190611d4a919061247a565b63ffffffff908116825260208083019390935260409182016000908120835180850190945285831684526001600160401b038088168587019081528254600181018455928452959092209351930180549451909116600160201b026bffffffffffffffffffffffff1990941692909116919091179190911790555b505050505050565b835463ffffffff82811691161415611e315783546001600160401b03838116600160601b0267ffffffffffffffff60601b19918616600160201b029190911673ffffffffffffffffffffffffffffffff000000001990921691909117178455611dc5565b6001600160a01b038087166000908152609b602090815260408083209389168352928152828220835160608101855263ffffffff80871682526001600160401b03808a168386019081528982169784019788528454600181018655948752949095209151919092018054935195518516600160601b0267ffffffffffffffff60601b1996909516600160201b026bffffffffffffffffffffffff1990941691909216179190911792909216179055505050505050565b6000635fc63040821015611f635760405162461bcd60e51b815260206004820152603d60248201527f45706f63685574696c732e67657445706f636846726f6d54696d657374616d7060448201527f3a2074696d657374616d70206973206265666f72652067656e6573697300000060648201526084016105d5565b62093a80611f75635fc63040846124b2565b6109ba919061263b565b6001600160a01b03811681146105e757600080fd5b8035611f9f81611f7f565b919050565b803563ffffffff81168114611f9f57600080fd5b600080600060608486031215611fcd57600080fd5b8335611fd881611f7f565b92506020840135611fe881611f7f565b9150611ff660408501611fa4565b90509250925092565b60006040828403121561201157600080fd5b50919050565b60008060008060a0858703121561202d57600080fd5b843561203881611f7f565b9350602085013561204881611f7f565b92506120578660408701611fff565b915061206560808601611fa4565b905092959194509250565b60006020828403121561208257600080fd5b81356109b781611f7f565b60006020828403121561209f57600080fd5b5035919050565b600080604083850312156120b957600080fd5b82356120c481611f7f565b915060208301356120d481611f7f565b809150509250929050565b6000806000606084860312156120f457600080fd5b83356120ff81611f7f565b9250602084013561210f81611f7f565b929592945050506040919091013590565b60006020828403121561213257600080fd5b813560ff811681146109b757600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561216f57600080fd5b843561217a81611f7f565b93506020612189868201611fa4565b935060408601356001600160401b03808211156121a557600080fd5b818801915088601f8301126121b957600080fd5b8135818111156121cb576121cb612143565b8060051b604051601f19603f830116810181811085821117156121f0576121f0612143565b60405291825284820192508381018501918b83111561220e57600080fd5b938501935b828510156122335761222485611f94565b84529385019392850192612213565b80975050505050505061206560608601611fa4565b80356001600160401b0381168114611f9f57600080fd5b60008060006060848603121561227457600080fd5b833561227f81611f7f565b925061228d60208501612248565b915060408401356001600160401b038111156122a857600080fd5b6122b486828701611fff565b9150509250925092565b600080600080606085870312156122d457600080fd5b84356122df81611f7f565b935060208501356001600160401b03808211156122fb57600080fd5b818701915087601f83011261230f57600080fd5b81358181111561231e57600080fd5b8860208260051b850101111561233357600080fd5b60208301955080945050604087013591508082111561235157600080fd5b5061235e87828801611fff565b91505092959194509250565b60008060006080848603121561237f57600080fd5b833561238a81611f7f565b9250602084013561239a81611f7f565b9150611ff68560408601611fff565b6000602082840312156123bb57600080fd5b81516109b781611f7f565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561242257600080fd5b815180151581146109b757600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b60006020828403121561248c57600080fd5b61249582611fa4565b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156124c4576124c461249c565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816124ee576124ee61249c565b506000190190565b600060001982141561250a5761250a61249c565b5060010190565b600082198211156125245761252461249c565b500190565b60008235603e1983360301811261253f57600080fd5b9190910192915050565b6000808335601e1984360301811261256057600080fd5b8301803591506001600160401b0382111561257a57600080fd5b602001915060608102360382131561259157600080fd5b9250929050565b6000602082840312156125aa57600080fd5b61249582612248565b60006001600160401b038083168185168083038211156125d5576125d561249c565b01949350505050565b60006001600160401b03838116908316818110156125fe576125fe61249c565b039392505050565b60008160001904831182151516156126205761262061249c565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261264a5761264a612625565b500490565b60006001600160401b03808316818516818304811182151516156126755761267561249c565b02949350505050565b60006001600160401b038084168061269857612698612625565b9216919091049291505056fea26469706673582212200dd229189ef3bbb5b81571a82f22315b0ced05db7a97ae8b41089b8fd687a4b764736f6c634300080c0033",
}

// SlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use SlasherMetaData.ABI instead.
var SlasherABI = SlasherMetaData.ABI

// SlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlasherMetaData.Bin instead.
var SlasherBin = SlasherMetaData.Bin

// DeploySlasher deploys a new Ethereum contract, binding an instance of Slasher to it.
func DeploySlasher(auth *bind.TransactOpts, backend bind.ContractBackend, _strategyManager common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *Slasher, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlasherBin), backend, _strategyManager, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// Slasher is an auto generated Go binding around an Ethereum contract.
type Slasher struct {
	SlasherCaller     // Read-only binding to the contract
	SlasherTransactor // Write-only binding to the contract
	SlasherFilterer   // Log filterer for contract events
}

// SlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlasherSession struct {
	Contract     *Slasher          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlasherCallerSession struct {
	Contract *SlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlasherTransactorSession struct {
	Contract     *SlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlasherRaw struct {
	Contract *Slasher // Generic contract binding to access the raw methods on
}

// SlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlasherCallerRaw struct {
	Contract *SlasherCaller // Generic read-only contract binding to access the raw methods on
}

// SlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlasherTransactorRaw struct {
	Contract *SlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlasher creates a new instance of Slasher, bound to a specific deployed contract.
func NewSlasher(address common.Address, backend bind.ContractBackend) (*Slasher, error) {
	contract, err := bindSlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// NewSlasherCaller creates a new read-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherCaller(address common.Address, caller bind.ContractCaller) (*SlasherCaller, error) {
	contract, err := bindSlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherCaller{contract: contract}, nil
}

// NewSlasherTransactor creates a new write-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*SlasherTransactor, error) {
	contract, err := bindSlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherTransactor{contract: contract}, nil
}

// NewSlasherFilterer creates a new log filterer instance of Slasher, bound to a specific deployed contract.
func NewSlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*SlasherFilterer, error) {
	contract, err := bindSlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlasherFilterer{contract: contract}, nil
}

// bindSlasher binds a generic wrapper to an already deployed contract.
func bindSlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.SlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transact(opts, method, params...)
}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0x92d4fb99.
//
// Solidity: function _checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns()
func (_Slasher *SlasherCaller) CheckPendingUpdates(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) error {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "_checkPendingUpdates", operator, strategy, operatorSet)

	if err != nil {
		return err
	}

	return err

}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0x92d4fb99.
//
// Solidity: function _checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns()
func (_Slasher *SlasherSession) CheckPendingUpdates(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) error {
	return _Slasher.Contract.CheckPendingUpdates(&_Slasher.CallOpts, operator, strategy, operatorSet)
}

// CheckPendingUpdates is a free data retrieval call binding the contract method 0x92d4fb99.
//
// Solidity: function _checkPendingUpdates(address operator, address strategy, (address,uint32) operatorSet) view returns()
func (_Slasher *SlasherCallerSession) CheckPendingUpdates(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet) error {
	return _Slasher.Contract.CheckPendingUpdates(&_Slasher.CallOpts, operator, strategy, operatorSet)
}

// AllocatorFor is a free data retrieval call binding the contract method 0x53fb2adf.
//
// Solidity: function allocatorFor(address ) view returns(address)
func (_Slasher *SlasherCaller) AllocatorFor(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "allocatorFor", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocatorFor is a free data retrieval call binding the contract method 0x53fb2adf.
//
// Solidity: function allocatorFor(address ) view returns(address)
func (_Slasher *SlasherSession) AllocatorFor(arg0 common.Address) (common.Address, error) {
	return _Slasher.Contract.AllocatorFor(&_Slasher.CallOpts, arg0)
}

// AllocatorFor is a free data retrieval call binding the contract method 0x53fb2adf.
//
// Solidity: function allocatorFor(address ) view returns(address)
func (_Slasher *SlasherCallerSession) AllocatorFor(arg0 common.Address) (common.Address, error) {
	return _Slasher.Contract.AllocatorFor(&_Slasher.CallOpts, arg0)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Slasher *SlasherCallerSession) Delegation() (common.Address, error) {
	return _Slasher.Contract.Delegation(&_Slasher.CallOpts)
}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherCaller) GetAllocatorFor(opts *bind.CallOpts, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getAllocatorFor", operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherSession) GetAllocatorFor(operator common.Address) (common.Address, error) {
	return _Slasher.Contract.GetAllocatorFor(&_Slasher.CallOpts, operator)
}

// GetAllocatorFor is a free data retrieval call binding the contract method 0x67e988de.
//
// Solidity: function getAllocatorFor(address operator) view returns(address)
func (_Slasher *SlasherCallerSession) GetAllocatorFor(operator common.Address) (common.Address, error) {
	return _Slasher.Contract.GetAllocatorFor(&_Slasher.CallOpts, operator)
}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherCaller) GetMagnitudeUpdate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getMagnitudeUpdate", operator, strategy, operatorSet, timestamp)

	if err != nil {
		return *new(SlasherMagnitudeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(SlasherMagnitudeUpdate)).(*SlasherMagnitudeUpdate)

	return out0, err

}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherSession) GetMagnitudeUpdate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	return _Slasher.Contract.GetMagnitudeUpdate(&_Slasher.CallOpts, operator, strategy, operatorSet, timestamp)
}

// GetMagnitudeUpdate is a free data retrieval call binding the contract method 0x16449dae.
//
// Solidity: function getMagnitudeUpdate(address operator, address strategy, (address,uint32) operatorSet, uint32 timestamp) view returns((uint32,uint64) magnitudeUpdate)
func (_Slasher *SlasherCallerSession) GetMagnitudeUpdate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, timestamp uint32) (SlasherMagnitudeUpdate, error) {
	return _Slasher.Contract.GetMagnitudeUpdate(&_Slasher.CallOpts, operator, strategy, operatorSet, timestamp)
}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCaller) GetSlashedRate(opts *bind.CallOpts, operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getSlashedRate", operator, strategy, operatorSet, epoch)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherSession) GetSlashedRate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	return _Slasher.Contract.GetSlashedRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// GetSlashedRate is a free data retrieval call binding the contract method 0x10c0a606.
//
// Solidity: function getSlashedRate(address operator, address strategy, (address,uint32) operatorSet, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCallerSession) GetSlashedRate(operator common.Address, strategy common.Address, operatorSet ISlasherOperatorSet, epoch uint32) (uint64, error) {
	return _Slasher.Contract.GetSlashedRate(&_Slasher.CallOpts, operator, strategy, operatorSet, epoch)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCaller) LastSlashed(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "lastSlashed", operator, strategy)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// LastSlashed is a free data retrieval call binding the contract method 0x5ab112d6.
//
// Solidity: function lastSlashed(address operator, address strategy) view returns(uint32)
func (_Slasher *SlasherCallerSession) LastSlashed(operator common.Address, strategy common.Address) (uint32, error) {
	return _Slasher.Contract.LastSlashed(&_Slasher.CallOpts, operator, strategy)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Slasher *SlasherCallerSession) Owner() (common.Address, error) {
	return _Slasher.Contract.Owner(&_Slasher.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_Slasher *SlasherCallerSession) Paused(index uint8) (bool, error) {
	return _Slasher.Contract.Paused(&_Slasher.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_Slasher *SlasherCallerSession) Paused0() (*big.Int, error) {
	return _Slasher.Contract.Paused0(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_Slasher *SlasherCallerSession) PauserRegistry() (common.Address, error) {
	return _Slasher.Contract.PauserRegistry(&_Slasher.CallOpts)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactor(opts *bind.CallOpts, operator common.Address, strategy common.Address) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactor", operator, strategy)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactor is a free data retrieval call binding the contract method 0x334f00d6.
//
// Solidity: function shareScalingFactor(address operator, address strategy) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactor(operator common.Address, strategy common.Address) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactor(&_Slasher.CallOpts, operator, strategy)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCaller) ShareScalingFactorAtEpoch(opts *bind.CallOpts, operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "shareScalingFactorAtEpoch", operator, strategy, epoch)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// ShareScalingFactorAtEpoch is a free data retrieval call binding the contract method 0xe49a1e84.
//
// Solidity: function shareScalingFactorAtEpoch(address operator, address strategy, uint32 epoch) view returns(uint64)
func (_Slasher *SlasherCallerSession) ShareScalingFactorAtEpoch(operator common.Address, strategy common.Address, epoch uint32) (uint64, error) {
	return _Slasher.Contract.ShareScalingFactorAtEpoch(&_Slasher.CallOpts, operator, strategy, epoch)
}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCaller) SlashingEpochHistory(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingEpochHistory", arg0, arg1, arg2)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherSession) SlashingEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashingEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingEpochHistory is a free data retrieval call binding the contract method 0x4279a7e6.
//
// Solidity: function slashingEpochHistory(address , address , uint256 ) view returns(uint32)
func (_Slasher *SlasherCallerSession) SlashingEpochHistory(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (uint32, error) {
	return _Slasher.Contract.SlashingEpochHistory(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCaller) SlashingUpdates(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "slashingUpdates", arg0, arg1, arg2)

	outstruct := new(struct {
		SlashingRate  uint64
		ScalingFactor uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SlashingRate = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.ScalingFactor = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherSession) SlashingUpdates(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingUpdates(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// SlashingUpdates is a free data retrieval call binding the contract method 0x0b1b781e.
//
// Solidity: function slashingUpdates(address , address , uint32 ) view returns(uint64 slashingRate, uint64 scalingFactor)
func (_Slasher *SlasherCallerSession) SlashingUpdates(arg0 common.Address, arg1 common.Address, arg2 uint32) (struct {
	SlashingRate  uint64
	ScalingFactor uint64
}, error) {
	return _Slasher.Contract.SlashingUpdates(&_Slasher.CallOpts, arg0, arg1, arg2)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Slasher *SlasherCallerSession) StrategyManager() (common.Address, error) {
	return _Slasher.Contract.StrategyManager(&_Slasher.CallOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Pause(&_Slasher.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_Slasher *SlasherTransactorSession) PauseAll() (*types.Transaction, error) {
	return _Slasher.Contract.PauseAll(&_Slasher.TransactOpts)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactor) QueueAllocation(opts *bind.TransactOpts, operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueAllocation", operator, allocationParams, allocatorSignature)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherSession) QueueAllocation(operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueAllocation(&_Slasher.TransactOpts, operator, allocationParams, allocatorSignature)
}

// QueueAllocation is a paid mutator transaction binding the contract method 0x8f96d9c7.
//
// Solidity: function queueAllocation(address operator, (address,((address,uint32),uint64)[])[] allocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactorSession) QueueAllocation(operator common.Address, allocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueAllocation(&_Slasher.TransactOpts, operator, allocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactor) QueueDeallocation(opts *bind.TransactOpts, operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueDeallocation", operator, deallocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherSession) QueueDeallocation(operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueDeallocation(&_Slasher.TransactOpts, operator, deallocationParams, allocatorSignature)
}

// QueueDeallocation is a paid mutator transaction binding the contract method 0xa3bf9e66.
//
// Solidity: function queueDeallocation(address operator, (address,((address,uint32),uint64)[])[] deallocationParams, (bytes,uint256) allocatorSignature) returns(uint32 effectTimestamp)
func (_Slasher *SlasherTransactorSession) QueueDeallocation(operator common.Address, deallocationParams []SlasherMagnitudeAdjustmentParam, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueDeallocation(&_Slasher.TransactOpts, operator, deallocationParams, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactor) QueueMagnitudeConcentration(opts *bind.TransactOpts, operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueMagnitudeConcentration", operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherSession) QueueMagnitudeConcentration(operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeConcentration(&_Slasher.TransactOpts, operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeConcentration is a paid mutator transaction binding the contract method 0xa33820fc.
//
// Solidity: function queueMagnitudeConcentration(address operator, uint64 nonslashableDecremented, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactorSession) QueueMagnitudeConcentration(operator common.Address, nonslashableDecremented uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeConcentration(&_Slasher.TransactOpts, operator, nonslashableDecremented, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactor) QueueMagnitudeDilution(opts *bind.TransactOpts, operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "queueMagnitudeDilution", operator, nonslashableAdded, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherSession) QueueMagnitudeDilution(operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeDilution(&_Slasher.TransactOpts, operator, nonslashableAdded, allocatorSignature)
}

// QueueMagnitudeDilution is a paid mutator transaction binding the contract method 0x5f83102a.
//
// Solidity: function queueMagnitudeDilution(address operator, uint64 nonslashableAdded, (bytes,uint256) allocatorSignature) returns(uint64 newNonslashableMagnitude, uint64 newTotalMagnitude)
func (_Slasher *SlasherTransactorSession) QueueMagnitudeDilution(operator common.Address, nonslashableAdded uint64, allocatorSignature ISignatureUtilsSignatureWithExpiry) (*types.Transaction, error) {
	return _Slasher.Contract.QueueMagnitudeDilution(&_Slasher.TransactOpts, operator, nonslashableAdded, allocatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Slasher *SlasherTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Slasher.Contract.RenounceOwnership(&_Slasher.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_Slasher *SlasherTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.SetPauserRegistry(&_Slasher.TransactOpts, newPauserRegistry)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherTransactor) SlashOperator(opts *bind.TransactOpts, operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "slashOperator", operator, operatorSetId, strategies, bipsToSlash)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherSession) SlashOperator(operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.Contract.SlashOperator(&_Slasher.TransactOpts, operator, operatorSetId, strategies, bipsToSlash)
}

// SlashOperator is a paid mutator transaction binding the contract method 0x5c120057.
//
// Solidity: function slashOperator(address operator, uint32 operatorSetId, address[] strategies, uint32 bipsToSlash) returns()
func (_Slasher *SlasherTransactorSession) SlashOperator(operator common.Address, operatorSetId uint32, strategies []common.Address, bipsToSlash uint32) (*types.Transaction, error) {
	return _Slasher.Contract.SlashOperator(&_Slasher.TransactOpts, operator, operatorSetId, strategies, bipsToSlash)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Slasher *SlasherTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Slasher.Contract.TransferOwnership(&_Slasher.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_Slasher *SlasherTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Unpause(&_Slasher.TransactOpts, newPausedStatus)
}

// SlasherInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Slasher contract.
type SlasherInitializedIterator struct {
	Event *SlasherInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherInitialized represents a Initialized event raised by the Slasher contract.
type SlasherInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) FilterInitialized(opts *bind.FilterOpts) (*SlasherInitializedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SlasherInitializedIterator{contract: _Slasher.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SlasherInitialized) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherInitialized)
				if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Slasher *SlasherFilterer) ParseInitialized(log types.Log) (*SlasherInitialized, error) {
	event := new(SlasherInitialized)
	if err := _Slasher.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Slasher contract.
type SlasherOwnershipTransferredIterator struct {
	Event *SlasherOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherOwnershipTransferred represents a OwnershipTransferred event raised by the Slasher contract.
type SlasherOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SlasherOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SlasherOwnershipTransferredIterator{contract: _Slasher.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SlasherOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherOwnershipTransferred)
				if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Slasher *SlasherFilterer) ParseOwnershipTransferred(log types.Log) (*SlasherOwnershipTransferred, error) {
	event := new(SlasherOwnershipTransferred)
	if err := _Slasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Slasher contract.
type SlasherPausedIterator struct {
	Event *SlasherPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPaused represents a Paused event raised by the Slasher contract.
type SlasherPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*SlasherPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherPausedIterator{contract: _Slasher.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SlasherPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPaused)
				if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParsePaused(log types.Log) (*SlasherPaused, error) {
	event := new(SlasherPaused)
	if err := _Slasher.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the Slasher contract.
type SlasherPauserRegistrySetIterator struct {
	Event *SlasherPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherPauserRegistrySet represents a PauserRegistrySet event raised by the Slasher contract.
type SlasherPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*SlasherPauserRegistrySetIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &SlasherPauserRegistrySetIterator{contract: _Slasher.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *SlasherPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherPauserRegistrySet)
				if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_Slasher *SlasherFilterer) ParsePauserRegistrySet(log types.Log) (*SlasherPauserRegistrySet, error) {
	event := new(SlasherPauserRegistrySet)
	if err := _Slasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherQueuedAllocationIterator is returned from FilterQueuedAllocation and is used to iterate over the raw logs and unpacked data for QueuedAllocation events raised by the Slasher contract.
type SlasherQueuedAllocationIterator struct {
	Event *SlasherQueuedAllocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherQueuedAllocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherQueuedAllocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherQueuedAllocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherQueuedAllocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherQueuedAllocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherQueuedAllocation represents a QueuedAllocation event raised by the Slasher contract.
type SlasherQueuedAllocation struct {
	Operator           common.Address
	Strategy           common.Address
	OperatorSet        ISlasherOperatorSet
	EffectTimestamp    uint32
	SlashableMagnitude uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterQueuedAllocation is a free log retrieval operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) FilterQueuedAllocation(opts *bind.FilterOpts) (*SlasherQueuedAllocationIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "QueuedAllocation")
	if err != nil {
		return nil, err
	}
	return &SlasherQueuedAllocationIterator{contract: _Slasher.contract, event: "QueuedAllocation", logs: logs, sub: sub}, nil
}

// WatchQueuedAllocation is a free log subscription operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) WatchQueuedAllocation(opts *bind.WatchOpts, sink chan<- *SlasherQueuedAllocation) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "QueuedAllocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherQueuedAllocation)
				if err := _Slasher.contract.UnpackLog(event, "QueuedAllocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQueuedAllocation is a log parse operation binding the contract event 0xd58fe98b8f837e1054e94eceb068193fdba71e6636654ef1e1a880008b306649.
//
// Solidity: event QueuedAllocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) ParseQueuedAllocation(log types.Log) (*SlasherQueuedAllocation, error) {
	event := new(SlasherQueuedAllocation)
	if err := _Slasher.contract.UnpackLog(event, "QueuedAllocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherQueuedDeallocationIterator is returned from FilterQueuedDeallocation and is used to iterate over the raw logs and unpacked data for QueuedDeallocation events raised by the Slasher contract.
type SlasherQueuedDeallocationIterator struct {
	Event *SlasherQueuedDeallocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherQueuedDeallocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherQueuedDeallocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherQueuedDeallocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherQueuedDeallocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherQueuedDeallocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherQueuedDeallocation represents a QueuedDeallocation event raised by the Slasher contract.
type SlasherQueuedDeallocation struct {
	Operator           common.Address
	Strategy           common.Address
	OperatorSet        ISlasherOperatorSet
	EffectTimestamp    uint32
	SlashableMagnitude uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterQueuedDeallocation is a free log retrieval operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) FilterQueuedDeallocation(opts *bind.FilterOpts) (*SlasherQueuedDeallocationIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "QueuedDeallocation")
	if err != nil {
		return nil, err
	}
	return &SlasherQueuedDeallocationIterator{contract: _Slasher.contract, event: "QueuedDeallocation", logs: logs, sub: sub}, nil
}

// WatchQueuedDeallocation is a free log subscription operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) WatchQueuedDeallocation(opts *bind.WatchOpts, sink chan<- *SlasherQueuedDeallocation) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "QueuedDeallocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherQueuedDeallocation)
				if err := _Slasher.contract.UnpackLog(event, "QueuedDeallocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQueuedDeallocation is a log parse operation binding the contract event 0xd08c2525f2c69887cf902b3aece56919812bd91bbcd8360517381141beb2c413.
//
// Solidity: event QueuedDeallocation(address operator, address strategy, (address,uint32) operatorSet, uint32 effectTimestamp, uint64 slashableMagnitude)
func (_Slasher *SlasherFilterer) ParseQueuedDeallocation(log types.Log) (*SlasherQueuedDeallocation, error) {
	event := new(SlasherQueuedDeallocation)
	if err := _Slasher.contract.UnpackLog(event, "QueuedDeallocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherTotalAndNonSlashableMagnitudeUpdatedIterator is returned from FilterTotalAndNonSlashableMagnitudeUpdated and is used to iterate over the raw logs and unpacked data for TotalAndNonSlashableMagnitudeUpdated events raised by the Slasher contract.
type SlasherTotalAndNonSlashableMagnitudeUpdatedIterator struct {
	Event *SlasherTotalAndNonSlashableMagnitudeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherTotalAndNonSlashableMagnitudeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherTotalAndNonSlashableMagnitudeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherTotalAndNonSlashableMagnitudeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherTotalAndNonSlashableMagnitudeUpdated represents a TotalAndNonSlashableMagnitudeUpdated event raised by the Slasher contract.
type SlasherTotalAndNonSlashableMagnitudeUpdated struct {
	Operator                common.Address
	Strategy                common.Address
	EffectTimestamp         uint32
	NonSlashableMagnitude   uint64
	TotalSlashableMagnitude uint64
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterTotalAndNonSlashableMagnitudeUpdated is a free log retrieval operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) FilterTotalAndNonSlashableMagnitudeUpdated(opts *bind.FilterOpts) (*SlasherTotalAndNonSlashableMagnitudeUpdatedIterator, error) {

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "TotalAndNonSlashableMagnitudeUpdated")
	if err != nil {
		return nil, err
	}
	return &SlasherTotalAndNonSlashableMagnitudeUpdatedIterator{contract: _Slasher.contract, event: "TotalAndNonSlashableMagnitudeUpdated", logs: logs, sub: sub}, nil
}

// WatchTotalAndNonSlashableMagnitudeUpdated is a free log subscription operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) WatchTotalAndNonSlashableMagnitudeUpdated(opts *bind.WatchOpts, sink chan<- *SlasherTotalAndNonSlashableMagnitudeUpdated) (event.Subscription, error) {

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "TotalAndNonSlashableMagnitudeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherTotalAndNonSlashableMagnitudeUpdated)
				if err := _Slasher.contract.UnpackLog(event, "TotalAndNonSlashableMagnitudeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalAndNonSlashableMagnitudeUpdated is a log parse operation binding the contract event 0x8e4b2526d5017d7ee3bd97a75c94a5f6d86cf704be2d442410238633b388c5f2.
//
// Solidity: event TotalAndNonSlashableMagnitudeUpdated(address operator, address strategy, uint32 effectTimestamp, uint64 nonSlashableMagnitude, uint64 totalSlashableMagnitude)
func (_Slasher *SlasherFilterer) ParseTotalAndNonSlashableMagnitudeUpdated(log types.Log) (*SlasherTotalAndNonSlashableMagnitudeUpdated, error) {
	event := new(SlasherTotalAndNonSlashableMagnitudeUpdated)
	if err := _Slasher.contract.UnpackLog(event, "TotalAndNonSlashableMagnitudeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Slasher contract.
type SlasherUnpausedIterator struct {
	Event *SlasherUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlasherUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlasherUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlasherUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlasherUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlasherUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlasherUnpaused represents a Unpaused event raised by the Slasher contract.
type SlasherUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*SlasherUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &SlasherUnpausedIterator{contract: _Slasher.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SlasherUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Slasher.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlasherUnpaused)
				if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_Slasher *SlasherFilterer) ParseUnpaused(log types.Log) (*SlasherUnpaused, error) {
	event := new(SlasherUnpaused)
	if err := _Slasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
